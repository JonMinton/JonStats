{"title":"Part Twenty Three: Time series and seasonality","markdown":{"yaml":{"title":"Part Twenty Three: Time series and seasonality","author":"Jon Minton","date":"2024-05-06","code-fold":true,"warning":false,"message":false,"categories":["time series","seasonality","statistics"]},"headingText":"Recap and introduction","containsRefs":false,"markdown":"\n\n\nIn previous posts on time series, we decomposed then applied a common general purpose modelling strategy for working with time series data called [ARIMA](../lms-are-glms-part-22/index.qmd). ARIMA model can involve autoregressive components ([`AR(p)`](../lms-are-glms-part-19/index.qmd)), integration/differencing components ([`I(d)`](../lms-are-glms-part-20/index.qmd)), and moving average components ([`MA(q)`](../lms-are-glms-part-21/index.qmd)). As we saw, the time series data can also be pre-transformed, in ways other than just differencing; the example of this we saw was the application of the Box-Cox transformation for regularising the variance of the outcome, and includes logging of values as one possible transformation within the framework. \n\nThe data we used previous was annual data, showing the numbers of airmiles travelled in the USA by year up to the 1960s. Of course, however, many types of time series data are sub-annual, reported not just by year, but by quarter, or month, or day as well. Data disaggregated into sub-annual units often exhibit **seasonal variation**, patterns that repeat themselves at regular intervals within a 12 month cycle. [^1]\n\n[^1]: Occasionally, we might also see repeated patterns over non-annual timescales. For example, we might see the apparent population size of a country shifting abruptly every 10 years, due to information from national censuses run every decade being incorporated into the population estimates. Or if we track sales by day we might see a weekly cycle, because trade during the weekends tends to be different than during the weekdays.  \n\nIn this post we will look at some seasonal data, and consider two strategies for working with this data: STL decomposition; and Seasonal ARIMA (SARIMA).\n\n\n## An example dataset \n\nLet's continue to use the examples and convenience functions from the `forecast` package used in the previous post, and for which the excellent book [**Forecasting: Principles and Practice**](https://otexts.com/fpp3/) is available freely online.\n\nFirst some packages\n\n```{r}\nlibrary(tidyverse)\nlibrary(fpp3)\nlibrary(forecast)\nlibrary(fable)\n```\n\nNow some seasonal data\n```{r}\n# Using this example dataset: https://otexts.com/fpp3/components.html\ndata(us_employment)\nus_retail_employment <- us_employment |>\n  filter(Title == \"Retail Trade\")\n\nus_retail_employment\n```\n\nThere are two differences we can see with this dataset compared with previous time series data we've looked at. \n\nFirstly, the data looks like a `data.frame` object, or more specifically a `tibble()` (due to the additional metadata at the top). In fact they are of a special type of `tibble` called a `tsibble`, which is basically a modified version of a tibble optimised to work with time series data. We can check this by interrogating the class attributes of `us_employment`:\n\n```{r}\nclass(us_retail_employment)\n```\n\nThese class attributes go broadly from the most specific type of object class: `tbl_ts` (the tsibble); to the most general type of object class: the `data.frame`. \n\nSecondly, we can see that the data are disaggregated not by year as in the last post's example, but also by month. So, what does this monthly data actually look like?\n\n```{r}\nautoplot(us_retail_employment, Employed) +\n  labs(y = \"Persons (thousands)\",\n       title = \"Total employment in US retail\")\n\n```\n\nThis data looks... spikey. There's clearly both a long-term trend - including periods of faster and slower growth, and occasionally some falls - but there's also what looks like a series of near-vertical spikes along this trend, at what may be regular intervals. What happens if we zoom into a smaller part of the time series?\n\n```{r}\nautoplot(\n    us_retail_employment |>\n        filter(year(Month) >=1990), \n    Employed) +\n  labs(y = \"Persons (thousands)\",\n       title = \"Total employment in US retail\")\n```\n\nHere we can start to see there's not just a single repeating 'vertical spike', but a pattern that appears to repeat within each year, for each year. Let's zoom in even further, for just three years: \n\n```{r}\nautoplot(\n    us_retail_employment |>\n        filter(between(year(Month), 1994, 1996)), \n    Employed) +\n  labs(y = \"Persons (thousands)\",\n       title = \"Total employment in US retail\")\n\n\n```\n\nAlthough each of these three years is different in terms of the average number of persons employed in retail, they are similar in terms of having a spike in employment towards the end of the year, then a drop off at the start of the year, then a relative plateau for the middle of the year. \n\nThis is an example of a seasonal pattern, information that gets revealed about a time series when we use a sub-annual resolution that might not be apparent it we used only annual data. How do we handle this kind of data?\n\n## Approach one: reannualise\n\nOf course we could simply reaggregate the data to an annual series: \n\n```{r}\nus_retail_employment |>\n    mutate(\n        year = year(Month)\n    ) |>\n    ungroup() |>\n    index_by(year) |>\n    summarise(\n        Employed = sum(Employed)\n    ) %>%\n    autoplot(., Employed)\n\n\n```\n\nOne thing we can notice with this is that there appears to be a big drop in total employment for the last year. This is likely because the last year is incomplete, so whereas previous years are summing up 12 months' observations, for the last year a smaller number of months are being summed up. We could then drop the last year:\n\n```{r}\nus_retail_employment |>\n    mutate(\n        year = year(Month)\n    ) |>\n    ungroup() |>\n    index_by(year) |>\n    summarise(\n        Employed = sum(Employed)\n    ) |>\n    filter(year != max(year)) %>%\n    autoplot(., Employed)\n\n```\n\nBut then we are losing some data that we really have. Even if we don't have the full year, we might be able to get a sense from just the first few months worth of data whether the overall values for the last year are likely to be up or down compared to the same month in the previous years. We could even turn this single annual time series into 12 separate series: comparing Januaries with Januaries, Februaries with Februaries, and so on. \n\n\n```{r}\nus_retail_employment |>\n    mutate(\n        year = year(Month), \n        month = month(Month, label = TRUE )\n    ) |>\n    ggplot(\n        aes(year, Employed)\n    ) + \n    facet_wrap(~month) + \n    geom_line()\n\n```\n\nHere we can see that comparing annual month-by-month shows a very similar trend overall. It's as if each month's values could be thought of as part of an annual 'signal' (an underlying long-term trend) **plus** a seasonal adjustment up or down: compared with the annual trend, Novembers and Decembers are likely to be high, and Januaries and Februaries to be low; and so on. \n\nIt's this intuition - That we have a trend component, and a seasonal component - which leads us to our second strategy: decomposition.\n\n## Approach Two: Seasonal Composition\n\nThe basic intuition of decomposition is to break sub-annual data into a series of parts: The underling long term **trend** component; and repeating (usually) annual **seasonal** component. \n\nA common method for performing this kind of decomposition is known as [**STL**](https://otexts.com/fpp3/stl.html). This actually stands for *Seasonal and Trend Decomposition using Loess* (Where Loess is itself another acronym). However it's *heuristically* easier to imagine it stands for **Season-Trend-Leftover**, as it tends to generate three outputs from a single time-series input that correspond to these three components. Let's regenerate [the example in the forecasting book](https://otexts.com/fpp3/stl.html) and then consider the outputs further:\n\n```{r}\nus_retail_employment |>\n    filter(year(Month) >= 1990) |>\n  model(\n    STL(Employed ~ trend(window = 7) +\n                   season(window = \"periodic\"),\n    robust = TRUE)) |>\n  components() |>\n  autoplot()\n\n```\n\nThe plotted output contain four rows. These are, respectively:\n\n- **Top Row**: The input data from the dataset\n- **Second Row**: The *trend* component from STL decomposition\n- **Third Row**: The *seasonal* component from the STL decomposition\n- **Bottom Row**: The remainder (or *leftover*) component from the STL decomposition. \n\nSo, what's going on? \n\nSTL uses an algorithm to find a repeated sequence (the *seasonal* component) in the data that, once subtracted from a long term *trend*, leaves a remainder (set of errors or deviations from observations) that is minimised in some way, and ideally random like white noise.  \n\nIf you expanded the code chunk above, you will see two parameters as part of the STL model: the `window` argument for a `trend()` function; and the `window` argument for a `season()` function. This implies there are ways of setting up STL differently, and these would produce different output components. What happens if we change the `window` argument to `1` (which I think is its smallest allowable value)?\n\n\n```{r}\nus_retail_employment |>\n    filter(year(Month) >= 1990) |>\n    filter(year(Month) <= 2017) |>\n  model(\n    STL(Employed ~ trend(window = 1) +\n                   season(window = \"periodic\"),\n    robust = TRUE)) |>\n  components() |>\n  autoplot()\n\n\n```\n\nHere the trend component becomes, for want of a better term, 'wigglier'. And the remainder term, except for a strange data artefact at the end, appears much smaller. So what does the `window` argument do? \n\nConceptually, what the `window` argument to `trend()` does is adjust the **stiffness** of the curve that the trendline uses to fit to the data. A longer window, indicated by a higher argument value, makes the curve stiffer, and a shorter window, indicated by a lower argument value, makes the curve less stiff. We've adjusted from the default window length of `7` to a much shorter length of `1`, making it much less stiff.[^2] Let's look at the effect of increasing the window length instead:\n\n[^2]: How this works is due to the acronym-in-the-acronym: LOESS, meaning *local estimation*. Effectively for each data point a local regression slope is calculated based on values a certain number of observations ahead and behind the value in question. The number of values ahead and behind considered is the 'window' size. \n\n```{r}\nus_retail_employment |>\n    filter(year(Month) >= 1990) |>\n  model(\n    STL(Employed ~ trend(window = 31) +\n                   season(window = \"periodic\"),\n    robust = TRUE)) |>\n  components() |>\n  autoplot()\n\n\n```\n\nHere we can see that, as well as the trend term being somewhat smoother than when a size `7` window length was used, the remainder term, though looking quite noisy, doesn't really look random anymore. In particular, there seems to be a fairly big jump in the remainder component in the late 2000s. The remainder series also does not particularly stationary, lurching up and down at particular points in the series. \n\nIn effect, the higher stiffness of the trend component means it is not able to capture and represent enough signal in the data, and so some of that 'signal' is still present in the remainder term, when it should be extracted instead. \n\nNow what happens if we adjust the window argument in the `season()` function instead? \n\n```{r}\n\nus_retail_employment |>\n    filter(year(Month) >= 1990) |>\n  model(\n    STL(Employed ~ trend(window = 7) +\n                   season(window = 5),\n    robust = TRUE)) |>\n  components() |>\n  autoplot()\n\n```\n\nIn the above I've reduced the season window size (by default it's infinite). Whereas before this seasonal pattern was forced to be constant for the whole time period, this time we an see that it changes, or 'evolves', over the course of the time series. We can also see that the remainder component, though looking quite random, now looks especially 'spiky', suggesting that the kinds of residuals left are somewhat further from Guassian white noise than in the first example. \n\n### Section concluding thoughts\n\nSTL decomposition is one of a number of strategies for decomposition available to us. Other examples are described here. However the aims and principles of decomposition are somewhat similar no matter what approach is used. \n\nHaving performed a decomposition on time series data, we *could* potentially apply something like an ARIMA model to the **trend** component of the data alone for purposes of projection. If using a constant seasonal component, we could then add this component onto forecast values from the trend component, along with noise consistent with the properties of the remainder component. However, there is a variant of the ARIMA model specification that can work with this kind of seasonal data directly. Let's look at that now\n\n## Approach Three: SARIMA\n\nSARIMA stands for ['Seasonal ARIMA'](https://otexts.com/fpp2/seasonal-arima.html) (where of course ARIMA stands for Autoregressive-Integrated-Moving Average). Whereas an ARIMA model has a specification shorthand `ARIMA(p, d, q)`, a SARIMA model has an extended specification: `SARIMA(p, d, q) (P, D, Q)_S`. This means that whereas `ARIMA` has three parameters to specify, a SARIMA model has seven. This might appear like a big jump in model complexity, but the gap from ARIMA to SARIMA is smaller than it first appears. \n\nTo see this it's first noticing that, as well as terms `p`, `d` and `q`, there are also terms `P`, `D` and `Q`. This would suggest that whatever Autoregressive (`p`), integration (`d`) and moving average (`q`) processes are involved in standard ARIMA are also involved in another capacity in SARIMA. And what's this other capacity? The clue to this is in the `S` term. \n\n`S` [^3] stands for the **seasonal** component of the model, and specifies the number of observations that are expected to include a repeating seasonal cycle. As most seasonal cycles are annual, this means `S` will be `12` if the data are monthly, `4` if the data are quarterly, and so on. \n\n[^3]: Sometimes `m` is used instead of S. \n\nThe UPPERCASE `P`, `D` and `Q` terms then specify which standard ARIMA processes should be modelled as occurring every `S` steps in the data series. Although algebraically this means SARIMA models may look a lot more complicated than standard ARIMA models, it's really the same process, and the same intuition, applied twice: to characterising the seasonal 'signals' in the time series, and to characteristing the non-seasonal 'signals' in the time series. \n\nAlthough there are important diagnostic charts and heuristics to use when determining and judging which SARIMA specification may be most appropriate for modelling seasonal data, such as the PACF and ACF, we can still use the auto.arima() function to see if the best SARIMA specification can be identified algorithmically: \n\n\n```{r}\nbest_sarima_model <- auto.arima(as.ts(us_retail_employment, \"Employed\"))\nbest_sarima_model\n```\n\n\nHere `auto.arima()` produced an `ARIMA(1, 1, 2) (2, 1, 2)_12` specification, meaning `p=1`, `d=1`, `q=2` for the non-seasonal part; and `P=2`, `D=1`, `Q=2` for the seasonal part.  \n\nWhat kind of forecasts does this produce? \n\n```{r}\nbest_sarima_model |> \n  forecast(h=48) |>\n  autoplot()\n\n```\n\nWe can see the forecasts tend to repeat the seasonal pattern apparent throughout the observed data, and also widen in the usual way the further we move from the observed data. \n\n\n## Summing up \n\nIn this post we have looked at three approaches for working with seasonal data: aggregating seasonality away; decomposition; and SARIMA. These are far from an exhaustive list, but hopefully illustrate some common strategies for working with this kind of data. \n","srcMarkdownNoYaml":"\n\n## Recap and introduction \n\nIn previous posts on time series, we decomposed then applied a common general purpose modelling strategy for working with time series data called [ARIMA](../lms-are-glms-part-22/index.qmd). ARIMA model can involve autoregressive components ([`AR(p)`](../lms-are-glms-part-19/index.qmd)), integration/differencing components ([`I(d)`](../lms-are-glms-part-20/index.qmd)), and moving average components ([`MA(q)`](../lms-are-glms-part-21/index.qmd)). As we saw, the time series data can also be pre-transformed, in ways other than just differencing; the example of this we saw was the application of the Box-Cox transformation for regularising the variance of the outcome, and includes logging of values as one possible transformation within the framework. \n\nThe data we used previous was annual data, showing the numbers of airmiles travelled in the USA by year up to the 1960s. Of course, however, many types of time series data are sub-annual, reported not just by year, but by quarter, or month, or day as well. Data disaggregated into sub-annual units often exhibit **seasonal variation**, patterns that repeat themselves at regular intervals within a 12 month cycle. [^1]\n\n[^1]: Occasionally, we might also see repeated patterns over non-annual timescales. For example, we might see the apparent population size of a country shifting abruptly every 10 years, due to information from national censuses run every decade being incorporated into the population estimates. Or if we track sales by day we might see a weekly cycle, because trade during the weekends tends to be different than during the weekdays.  \n\nIn this post we will look at some seasonal data, and consider two strategies for working with this data: STL decomposition; and Seasonal ARIMA (SARIMA).\n\n\n## An example dataset \n\nLet's continue to use the examples and convenience functions from the `forecast` package used in the previous post, and for which the excellent book [**Forecasting: Principles and Practice**](https://otexts.com/fpp3/) is available freely online.\n\nFirst some packages\n\n```{r}\nlibrary(tidyverse)\nlibrary(fpp3)\nlibrary(forecast)\nlibrary(fable)\n```\n\nNow some seasonal data\n```{r}\n# Using this example dataset: https://otexts.com/fpp3/components.html\ndata(us_employment)\nus_retail_employment <- us_employment |>\n  filter(Title == \"Retail Trade\")\n\nus_retail_employment\n```\n\nThere are two differences we can see with this dataset compared with previous time series data we've looked at. \n\nFirstly, the data looks like a `data.frame` object, or more specifically a `tibble()` (due to the additional metadata at the top). In fact they are of a special type of `tibble` called a `tsibble`, which is basically a modified version of a tibble optimised to work with time series data. We can check this by interrogating the class attributes of `us_employment`:\n\n```{r}\nclass(us_retail_employment)\n```\n\nThese class attributes go broadly from the most specific type of object class: `tbl_ts` (the tsibble); to the most general type of object class: the `data.frame`. \n\nSecondly, we can see that the data are disaggregated not by year as in the last post's example, but also by month. So, what does this monthly data actually look like?\n\n```{r}\nautoplot(us_retail_employment, Employed) +\n  labs(y = \"Persons (thousands)\",\n       title = \"Total employment in US retail\")\n\n```\n\nThis data looks... spikey. There's clearly both a long-term trend - including periods of faster and slower growth, and occasionally some falls - but there's also what looks like a series of near-vertical spikes along this trend, at what may be regular intervals. What happens if we zoom into a smaller part of the time series?\n\n```{r}\nautoplot(\n    us_retail_employment |>\n        filter(year(Month) >=1990), \n    Employed) +\n  labs(y = \"Persons (thousands)\",\n       title = \"Total employment in US retail\")\n```\n\nHere we can start to see there's not just a single repeating 'vertical spike', but a pattern that appears to repeat within each year, for each year. Let's zoom in even further, for just three years: \n\n```{r}\nautoplot(\n    us_retail_employment |>\n        filter(between(year(Month), 1994, 1996)), \n    Employed) +\n  labs(y = \"Persons (thousands)\",\n       title = \"Total employment in US retail\")\n\n\n```\n\nAlthough each of these three years is different in terms of the average number of persons employed in retail, they are similar in terms of having a spike in employment towards the end of the year, then a drop off at the start of the year, then a relative plateau for the middle of the year. \n\nThis is an example of a seasonal pattern, information that gets revealed about a time series when we use a sub-annual resolution that might not be apparent it we used only annual data. How do we handle this kind of data?\n\n## Approach one: reannualise\n\nOf course we could simply reaggregate the data to an annual series: \n\n```{r}\nus_retail_employment |>\n    mutate(\n        year = year(Month)\n    ) |>\n    ungroup() |>\n    index_by(year) |>\n    summarise(\n        Employed = sum(Employed)\n    ) %>%\n    autoplot(., Employed)\n\n\n```\n\nOne thing we can notice with this is that there appears to be a big drop in total employment for the last year. This is likely because the last year is incomplete, so whereas previous years are summing up 12 months' observations, for the last year a smaller number of months are being summed up. We could then drop the last year:\n\n```{r}\nus_retail_employment |>\n    mutate(\n        year = year(Month)\n    ) |>\n    ungroup() |>\n    index_by(year) |>\n    summarise(\n        Employed = sum(Employed)\n    ) |>\n    filter(year != max(year)) %>%\n    autoplot(., Employed)\n\n```\n\nBut then we are losing some data that we really have. Even if we don't have the full year, we might be able to get a sense from just the first few months worth of data whether the overall values for the last year are likely to be up or down compared to the same month in the previous years. We could even turn this single annual time series into 12 separate series: comparing Januaries with Januaries, Februaries with Februaries, and so on. \n\n\n```{r}\nus_retail_employment |>\n    mutate(\n        year = year(Month), \n        month = month(Month, label = TRUE )\n    ) |>\n    ggplot(\n        aes(year, Employed)\n    ) + \n    facet_wrap(~month) + \n    geom_line()\n\n```\n\nHere we can see that comparing annual month-by-month shows a very similar trend overall. It's as if each month's values could be thought of as part of an annual 'signal' (an underlying long-term trend) **plus** a seasonal adjustment up or down: compared with the annual trend, Novembers and Decembers are likely to be high, and Januaries and Februaries to be low; and so on. \n\nIt's this intuition - That we have a trend component, and a seasonal component - which leads us to our second strategy: decomposition.\n\n## Approach Two: Seasonal Composition\n\nThe basic intuition of decomposition is to break sub-annual data into a series of parts: The underling long term **trend** component; and repeating (usually) annual **seasonal** component. \n\nA common method for performing this kind of decomposition is known as [**STL**](https://otexts.com/fpp3/stl.html). This actually stands for *Seasonal and Trend Decomposition using Loess* (Where Loess is itself another acronym). However it's *heuristically* easier to imagine it stands for **Season-Trend-Leftover**, as it tends to generate three outputs from a single time-series input that correspond to these three components. Let's regenerate [the example in the forecasting book](https://otexts.com/fpp3/stl.html) and then consider the outputs further:\n\n```{r}\nus_retail_employment |>\n    filter(year(Month) >= 1990) |>\n  model(\n    STL(Employed ~ trend(window = 7) +\n                   season(window = \"periodic\"),\n    robust = TRUE)) |>\n  components() |>\n  autoplot()\n\n```\n\nThe plotted output contain four rows. These are, respectively:\n\n- **Top Row**: The input data from the dataset\n- **Second Row**: The *trend* component from STL decomposition\n- **Third Row**: The *seasonal* component from the STL decomposition\n- **Bottom Row**: The remainder (or *leftover*) component from the STL decomposition. \n\nSo, what's going on? \n\nSTL uses an algorithm to find a repeated sequence (the *seasonal* component) in the data that, once subtracted from a long term *trend*, leaves a remainder (set of errors or deviations from observations) that is minimised in some way, and ideally random like white noise.  \n\nIf you expanded the code chunk above, you will see two parameters as part of the STL model: the `window` argument for a `trend()` function; and the `window` argument for a `season()` function. This implies there are ways of setting up STL differently, and these would produce different output components. What happens if we change the `window` argument to `1` (which I think is its smallest allowable value)?\n\n\n```{r}\nus_retail_employment |>\n    filter(year(Month) >= 1990) |>\n    filter(year(Month) <= 2017) |>\n  model(\n    STL(Employed ~ trend(window = 1) +\n                   season(window = \"periodic\"),\n    robust = TRUE)) |>\n  components() |>\n  autoplot()\n\n\n```\n\nHere the trend component becomes, for want of a better term, 'wigglier'. And the remainder term, except for a strange data artefact at the end, appears much smaller. So what does the `window` argument do? \n\nConceptually, what the `window` argument to `trend()` does is adjust the **stiffness** of the curve that the trendline uses to fit to the data. A longer window, indicated by a higher argument value, makes the curve stiffer, and a shorter window, indicated by a lower argument value, makes the curve less stiff. We've adjusted from the default window length of `7` to a much shorter length of `1`, making it much less stiff.[^2] Let's look at the effect of increasing the window length instead:\n\n[^2]: How this works is due to the acronym-in-the-acronym: LOESS, meaning *local estimation*. Effectively for each data point a local regression slope is calculated based on values a certain number of observations ahead and behind the value in question. The number of values ahead and behind considered is the 'window' size. \n\n```{r}\nus_retail_employment |>\n    filter(year(Month) >= 1990) |>\n  model(\n    STL(Employed ~ trend(window = 31) +\n                   season(window = \"periodic\"),\n    robust = TRUE)) |>\n  components() |>\n  autoplot()\n\n\n```\n\nHere we can see that, as well as the trend term being somewhat smoother than when a size `7` window length was used, the remainder term, though looking quite noisy, doesn't really look random anymore. In particular, there seems to be a fairly big jump in the remainder component in the late 2000s. The remainder series also does not particularly stationary, lurching up and down at particular points in the series. \n\nIn effect, the higher stiffness of the trend component means it is not able to capture and represent enough signal in the data, and so some of that 'signal' is still present in the remainder term, when it should be extracted instead. \n\nNow what happens if we adjust the window argument in the `season()` function instead? \n\n```{r}\n\nus_retail_employment |>\n    filter(year(Month) >= 1990) |>\n  model(\n    STL(Employed ~ trend(window = 7) +\n                   season(window = 5),\n    robust = TRUE)) |>\n  components() |>\n  autoplot()\n\n```\n\nIn the above I've reduced the season window size (by default it's infinite). Whereas before this seasonal pattern was forced to be constant for the whole time period, this time we an see that it changes, or 'evolves', over the course of the time series. We can also see that the remainder component, though looking quite random, now looks especially 'spiky', suggesting that the kinds of residuals left are somewhat further from Guassian white noise than in the first example. \n\n### Section concluding thoughts\n\nSTL decomposition is one of a number of strategies for decomposition available to us. Other examples are described here. However the aims and principles of decomposition are somewhat similar no matter what approach is used. \n\nHaving performed a decomposition on time series data, we *could* potentially apply something like an ARIMA model to the **trend** component of the data alone for purposes of projection. If using a constant seasonal component, we could then add this component onto forecast values from the trend component, along with noise consistent with the properties of the remainder component. However, there is a variant of the ARIMA model specification that can work with this kind of seasonal data directly. Let's look at that now\n\n## Approach Three: SARIMA\n\nSARIMA stands for ['Seasonal ARIMA'](https://otexts.com/fpp2/seasonal-arima.html) (where of course ARIMA stands for Autoregressive-Integrated-Moving Average). Whereas an ARIMA model has a specification shorthand `ARIMA(p, d, q)`, a SARIMA model has an extended specification: `SARIMA(p, d, q) (P, D, Q)_S`. This means that whereas `ARIMA` has three parameters to specify, a SARIMA model has seven. This might appear like a big jump in model complexity, but the gap from ARIMA to SARIMA is smaller than it first appears. \n\nTo see this it's first noticing that, as well as terms `p`, `d` and `q`, there are also terms `P`, `D` and `Q`. This would suggest that whatever Autoregressive (`p`), integration (`d`) and moving average (`q`) processes are involved in standard ARIMA are also involved in another capacity in SARIMA. And what's this other capacity? The clue to this is in the `S` term. \n\n`S` [^3] stands for the **seasonal** component of the model, and specifies the number of observations that are expected to include a repeating seasonal cycle. As most seasonal cycles are annual, this means `S` will be `12` if the data are monthly, `4` if the data are quarterly, and so on. \n\n[^3]: Sometimes `m` is used instead of S. \n\nThe UPPERCASE `P`, `D` and `Q` terms then specify which standard ARIMA processes should be modelled as occurring every `S` steps in the data series. Although algebraically this means SARIMA models may look a lot more complicated than standard ARIMA models, it's really the same process, and the same intuition, applied twice: to characterising the seasonal 'signals' in the time series, and to characteristing the non-seasonal 'signals' in the time series. \n\nAlthough there are important diagnostic charts and heuristics to use when determining and judging which SARIMA specification may be most appropriate for modelling seasonal data, such as the PACF and ACF, we can still use the auto.arima() function to see if the best SARIMA specification can be identified algorithmically: \n\n\n```{r}\nbest_sarima_model <- auto.arima(as.ts(us_retail_employment, \"Employed\"))\nbest_sarima_model\n```\n\n\nHere `auto.arima()` produced an `ARIMA(1, 1, 2) (2, 1, 2)_12` specification, meaning `p=1`, `d=1`, `q=2` for the non-seasonal part; and `P=2`, `D=1`, `Q=2` for the seasonal part.  \n\nWhat kind of forecasts does this produce? \n\n```{r}\nbest_sarima_model |> \n  forecast(h=48) |>\n  autoplot()\n\n```\n\nWe can see the forecasts tend to repeat the seasonal pattern apparent throughout the observed data, and also widen in the usual way the further we move from the observed data. \n\n\n## Summing up \n\nIn this post we have looked at three approaches for working with seasonal data: aggregating seasonality away; decomposition; and SARIMA. These are far from an exhaustive list, but hopefully illustrate some common strategies for working with this kind of data. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Part Twenty Three: Time series and seasonality","author":"Jon Minton","date":"2024-05-06","message":false,"categories":["time series","seasonality","statistics"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}