{"title":"Likelihood and Simulation Theory","markdown":{"yaml":{"title":"Likelihood and Simulation Theory","code-fold":"show","warning":false,"message":false,"bibliography":"references.bib"},"headingText":"Bayes' Rule and Likelihood","containsRefs":false,"markdown":"\n\nIn [the first part of the course](../intro-to-glms/index.qmd), I stated that statistical model fitting, within the generalised model framework presented in @KinTomWit00, involves adjusting candidate values for elements of $\\beta = \\{\\beta_0, \\beta_1, ..., \\beta_K \\}$ such that the difference between what the model predicts given some predictor values, $Y_i | X_i$, and what has been observed alongside the predictors, $y_i$, is minimised on average[^1] in some way.\n\n[^1]: If $Y_i$ is what the model predicts given observations $X_i$, and $y_i$ is the outcome observed to have occurred alongside $X_i$, then we can call $\\delta_i = h(y_i, Y_i)$ the difference, or error, between predicted and observed value. The function $h(.,.)$ is typically the squared difference between predicted and observed values, $(Y_i - y_i)^2$, but could also in principle be the absolute difference $|Y_i - y_i|$. Term-fitting algorithms usually compare not any individual $\\delta_i$, but a sum of these error terms $\\delta$. The aim of the algorithm is to find the set of $\\beta$ terms that is least wrong for the whole dataset $D$, rather than any specific row in the dataset $D_i$.  \n\nThe aim of this post is to show how this process is typically implemented in GLMs, using likelihood theory. \n\n\nStatisticians and more advanced users of statistical models often divide themselves into 'frequentists' and 'Bayesians'. To some extent the distinction is really between 'improper Bayesians' and 'proper Bayesians', however, as Bayes' Rule is at the root of both approaches. [Bayes' Rule](https://en.wikipedia.org/wiki/Bayes%27_theorem) is:\n\n$$\nP(A|B) = \\frac{P(B|A)P(A)}{P(B)}\n$$\n\nNote in the above the left hand side of the equation is $P(A|B)$ and the right hand side of the equation *includes* $P(B|A)$. To write it out as awkward prose, therefore, Bayes' Rule is a way of expressing **that given this** in terms of **this given that**. \n\nAs with much of algebra, $A$ and $B$ are just placeholders. We could instead use different symbols instead, such as: \n\n$$\nP(\\tilde{\\theta} | y) = \\frac{P(y | \\tilde{\\theta})P(\\tilde{\\theta})}{P(y)}\n$$\n\n\nLikelihood theory offers a way of thinking about how good a model is in terms of its relationship to the data. According to @King98 (p. 59), it can be expressed as: \n\n$$\nL(\\tilde{\\theta}| y) = k(y) P(y | \\tilde{\\theta}) \n$$\n\nOr \n\n$$\nL(\\tilde{\\theta} | y) \\propto P(y | \\tilde{\\theta})\n$$\n\nWhere $\\tilde{\\theta}$ is a proposed parameter or parameter combination for the model, and $y$ is the observed outcome.[^2] \n\n[^2]: As @King98 (p. 59) describes it, \"$k(y)$ is an unknown fuction of the data. Whereas traditional probability is a measure of *absolute* uncertainty ... the constant $k(y)$ means that likelihood is only a *relative* measure of uncertainty\"\n\nThe important thing to note is that both Bayes' Rule and Likelihood Theory are ways of expressing **this given that** as a function of **that given this**. Specifically, the model given the data, as a function of the data given the model. [^3]\n\n\n[^3]: Frequentist approaches can thus be considered a kind of 'improper Bayesian' approach by considering $k(y)$ in the Likelihood formula as a stand-in for $\\frac{P(\\tilde{\\theta})}{P(y)}$ in Bayes' Rule. Roughly speaking, it's because of the improperness of treating the two terms as equivalent, and the relativeness of $k(y)$, that mean frequentist probability statements can't be interpreted as Bayesian probability statements. But thinking of the two terms as equivalent can be helpful for spotting the similarity between the two formulae. \n\n## Likelihood for linear regression \n\nWhen, many years ago, I completed [the course](https://scholar.harvard.edu/msen/classes/government-2001-advanced-quantitative-research-methodology-professor-gary-king) from this modelling framework is most associated, a hazing ritual employed near the start of the course was to require participants to derive the likelihood of different model specifications. However, I don't feel like hazing myself right now, so instead we can use the derivation shown on [slide 8 of these slides](https://scholar.harvard.edu/files/msen/files/sen_gov2001_section5.pdf): \n\n$$\nL(\\beta, \\sigma^2 | y) = \\prod{L(y_i | \\mu_i, \\sigma^2)}\n$$\n\nWhere $\\mu = X \\beta$, $i$ indicates an observation in the data (a row of $X$ when $X$ is in matrix form), and $\\prod$ indicates the likelihoods from each observation should be multiplied with each other to derive the overall likelihood for all observed data.\n\nIn practice the log Likelihood, rather than the likelihood itself, is used, because this allows calculation of a sum of terms ($\\sum$) rather than product of terms ($\\prod$), and the latter tends to be computationally easier to calculate. \n\nAs we are interested only in how likelihood varies as a function of those model parameters we wish to estimate, $\\theta = \\{\\beta, \\sigma^2\\}$, some of the terms in the log likelihood expression can be omitted, leaving us with:\n\n$$\n\\log{L(\\beta, \\sigma^2 | y)} \\doteq \\sum{-\\frac{1}{2}[\\log{\\sigma^2} + \\frac{(y_i - X_i\\beta)^2}{\\sigma^2}]}\n$$\n\nFor all the complexity of the above expression, at heart it takes three inputs:\n\n- $\\theta = \\{\\beta, \\sigma^2\\}$ : The candidate *parameters* for the model. \n- $y$ : the observed **response** value from the dataset $D$\n- $X$ : the observed **predictor** values from the dataset $D$\n\nAnd returns one value, the log likelihood $\\log{L(.)}$. \n\nTo reiterate, we can't change the data, but we can keep changing the candidate parameters $\\theta$. Each time we do so, $\\log{L(.)}$ will change too. \n\n*The aim of model calibration, in the Likelihood framework, is to maximise the Likelihood.* The parameter set that maximises the likelihood is also the parameter set that maximises the log likelihood. \n\nTo continue the example from the slides, we can write out a function for calculating the log likelihood of standard linear regression as follows:\n\n```{r}\n#| echo: true\nllNormal <- function(pars, y, X){\n    beta <- pars[1:ncol(X)]\n    sigma2 <- exp(pars[ncol(X)+1])\n    -1/2 * (sum(log(sigma2) + (y - (X%*%beta))^2 / sigma2))\n}\n```\n\nIn the above, `pars` is (almost but not quite) $\\theta$, the parameters to estimate. For standard linear regression $\\theta = \\{\\beta, \\sigma^2\\}$, where $\\beta = \\{\\beta_0, \\beta_1, ..., \\beta_k\\}$, i.e. a vector of beta parameters, one for each column (variable) in $X$, the predictor matrix of observations; this is why $beta$ is selected from the first K values in `pars` where K is the number of columns in $X$. \n\nThe last value in `pars` is used to derive the proposed $\\sigma^2$. If we call this last value `eta` ($\\eta$), then we can say $\\sigma^2 = e^{\\eta}$. So, whereas $\\theta$ is a vector that 'packs' $\\beta$ and $\\sigma^2$ into a single ordered series of values, `pars` packs `eta` in place of $\\sigma^2$. This substitution of `eta` for $\\sigma^2$ is done to make it easier for standard parameter fitting algorithms to work, as they tend to operate over the full real number range, rather than just over positive values. \n\nIn order to illustrate how the log likelihood function `llNormal` works in practice, let's construct a simple toy dataset $D$, and decompose $D = \\{y, X\\}$, the two types of data input that go into the `llNormal` function. \n\n```{r}\n# set a seed so runs are identical\nset.seed(7)\n# create a main predictor variable vector: -3 to 5 in increments of 1\nx <- (-3):5\n# Record the number of observations in x\nN <- length(x)\n# Create a response variable with variability\ny <- 2.5 + 1.4 * x  + rnorm(N, mean = 0, sd = 0.5)\n\n# bind x into a two column matrix whose first column is a vector of 1s (for the intercept)\n\nX <- cbind(rep(1, N), x)\n# Clean up names\ncolnames(X) <- NULL\n\n```\n\nIn the code above we have created $y$, a vector of nine observed responses; and $X$, a matrix of predictors with two columns (the number of variables for which $beta$ terms need to be estimated) and nine rows (the number of observations). \n\nGraphically, the relationship between x and y looks as follows:\n\n```{r}\nlibrary(tidyverse)\ntibble(x=x, y=y) |>\n    ggplot(aes(x, y)) + \n    geom_point()\n\n```\n\nIn this toy example, but almost never in reality, we *know* the correct parameters for the model. These are ${\\beta_0 = 2.5, \\beta_1 = 1.4}$ and $\\sigma^2 = 0.25$. [^4] Soon, we will see how effectively we can use optimisation algorithms to recover these true model parameters. But first, let's see how the log likelihood varies as a function jointly of different candidate values of $\\beta_0$ (the intercept) and $\\beta_1$ (the slope parameter), if we already set $\\sigma^2$ to `0.25`. \n\n\n[^4]: i.e. the square of the `sd` passed to `rnorm()` of 0.5\n\n\n```{r}\n\ncandidate_param_values <- expand_grid(\n    beta_0 = seq(-5, 5, by = 0.1),\n    beta_1 = seq(-5, 5, by = 0.1)\n)\n\nfeed_to_ll <- function(b0, b1){\n    pars <- c(b0, b1, log(0.25))\n    llNormal(pars, y, X)\n}\n\ncandidate_param_values <- candidate_param_values |>\n    mutate(\n        ll = map2_dbl(beta_0, beta_1, feed_to_ll)\n    )\n```\n\n```{r}\ncandidate_param_values |>\n    ggplot(aes(beta_0, beta_1, z = ll)) + \n    geom_contour_filled() + \n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) +\n    labs(\n        title = \"Log likelihood as a function of possible values of beta_0 and beta_1\",\n        x = \"beta0 (the intercept)\",\n        y = \"beta1 (the slope)\"\n    )\n```\n\nLooking at this joint surface of values, we can see a 'hotspot' where $\\beta_0$ is around 2.5, and $\\beta_1$ is around 1.4, just as we should expect. We can check this further by filtering candidate_param_values on the highest observed values of ll.\n\n```{r}\ncandidate_param_values |> \n    filter(ll == max(ll))\n\n```\n \n\n## Optimisation algorithms: getting there faster\n\nPreviously, we 'cheated' a bit when using the log likelihood function, fixing the value for one of the parameters $\\sigma^2$ to the value we used when we generated the data, so we could instead look at how the log likelihood surface varied as different combinations of $\\beta_0$ and $\\beta_1$ were plugged into the formula. $\\beta_0$ and $\\beta_1$ values ranging from -5 to 5, and at steps of 0.1, were considered: 101 values of $\\beta_0$, 101 values of $\\beta_1$, and so over 10,000[^5] unique $\\{\\beta_0, \\beta_1\\}$ combinations were stepped through. This approach is known as grid search, and seldom used in practice (except for illustration purposes) because the number of calculations involved can very easily get out of hand. For example, if we were to use it to explore as many distinct values of $\\sigma^2$ as we considered for $\\beta_0$ and $\\beta_1$, the total number of $\\{\\beta_0, \\beta_1, \\sigma^2 \\}$ combinations we would crawl through would be over 100,000 [^6] rather than over 10,000. \n\n\n[^5]: $101^2 = 10201$\n\n[^6]: $101^3 = 1030301$\n\nOne feature we noticed with the likelihood surface over $\\beta_0$ and $\\beta_1$ in the previous post is that it appears to look like a hill, with a clearly defined highest point (the region of maximum likelihood) and descent in all directions from this highest point. Where likelihood surfaces have this feature of being single-peaked in this way (known as 'unimodal'), then a class of algorithms known as 'hill climbing algorithms' can be applied to find the top of such peaks in a way that tends to be both quicker (fewer steps) and more precise than the grid search approach used for illustration in the previous post. \n\n\n## `optim` for parameter point estimation: our Robo-Chauffeur\n\nNote how the `llNormal` function takes a single argument, `pars`, which packages up all the specific candidate parameter values we want to try out. In our previous post, we also had a 'feeder function', `feed_to_ll`, which takes the various $\\beta$ candidate values from the grid and packages them into `pars`. In our previous post, we had to specify the candidate values to try to feed to `llNormal` packages inside `pars`. \n\nBut we don't have to do this. We can instead use an algorithm to take candidate parameters, try them out, then make new candidate parameters and try them out, for us. Much as a taxi driver needs to know where to meet a passenger, but doesn't want the passenger to tell them exactly which route to take, we just need to specify a starting set of values for the parameters to optimise. R's standard way of doing this is with the `optim` function. Here's it in action:\n\n```{r}\n\noptim_results <-  optim(\n    # par contains our initial guesses for the three parameters to estimate\n    par = c(0, 0, 0), \n\n    # by default, most optim algorithms prefer to search for a minima (lowest point) rather than maxima \n    # (highest point). So, I'm making a function to call which simply inverts the log likelihood by multiplying \n    # what it returns by -1\n    fn = function(par, y, X) {-llNormal(par, y, X)}, \n\n    # in addition to the par vector, our function also needs the observed output (y)\n    # and the observed predictors (X). These have to be specified as additional arguments.\n    y = y, X = X\n    )\n\noptim_results\n```\n\nThe `optim` function returns a fairly complex output structure, with the following components:\n\n- `par`: the values for the parameters (in our case $\\{\\beta_0, \\beta_1, \\eta \\}$) which the optimisation algorithm ended up with.\n\n- `value`: the value returned by the function `fn` when the optim routine was stopped. \n\n- `counts`: the number of times the function `fn` was repeatedly called by `optim` before `optim` decided it had had enough\n\n- `convergence`: whether the algorithm used by `optim` completed successfully (i.e. reached what it considers a good set of parameter estimates in `par`), or not. \n\nIn this case, convergence is `0`, which (perhaps counterintuitively) indicates a successful completion. `counts` indicates that optim called the log likelihood function 216 times before stopping, and `par` indicates values of $\\{\\beta_0 = 2.46, \\beta_1 = 1.38, \\eta = -1.34\\}$ were arrived at. As $\\sigma^2 = e^\\eta$, this means $\\theta = \\{\\beta_0 = 2.46, \\beta_1 = 1.38, \\sigma^2 = 0.26 \\}$. As a reminder, the 'true' values are $\\{\\beta_0 = 2.50, \\beta_1 = 1.40, \\sigma^2 = 0.25\\}$. \n\nSo, the `optim` algorithm has arrived at pretty much the correct answers for all three parameters, in 216 calls to the log likelihood function, whereas for the grid search approach in the last post we made over 10,000 calls to the log likelihood function for just *two* of the three parameters. \n\nLet's see if we can get more information on exactly what kind of path `optim` took to get to this set of parameter estimates. We should be able to do this by specifying a value in the `trace` component in the `control` argument slot...\n\n\n### Comparisons with 'canned' functions\n\nFor comparison let's see what `lm` and `glm` produce. \n\nFirst `lm`:\n\n```{r}\ntoy_df <- tibble(\n    x = x, \n    y = y\n)\n\n\nmod_lm <- lm(y ~ x, data = toy_df)\nsummary(mod_lm)\n```\n\n$\\{\\beta_0 = 2.46, \\beta_1 = 1.38\\}$, i.e. the same to 2 decimal places. \n\nAnd now with `glm`:\n\n```{r}\nmod_glm <- glm(y ~ x, data = toy_df, family = gaussian(link = \"identity\"))\n\nsummary(mod_glm)\n```\n\nOnce again, $\\{\\beta_0 = 2.46, \\beta_1 = 1.38\\}$\n\n\n### Discussion\n\nIn the above, we've successfully used `optim`, our Robo-Chauffeur, to arrive very quickly at some good estimates for our parameters of interest, $\\beta_0$ and $\\beta_1$, which are in effect identical to those produced by the `lm` and `glm` functions. \n\nThis isn't a coincidence. What we've done the hard way is what the `glm` function (in particular) largely does 'under the hood'.\n\n\n## `optim`al uncertainty\n\nWhen using `optim()` above, we managed to get it to return a set of parameter values for our model that it thought was 'best', i.e. minimised the loss function specified by the log likelihood. These are known as **point estimates**, and are effectively the coefficients presented by `lm` or `glm` or equivalent statistical functions and packages. However `optim()` just returned these point estimates, without any indication of how uncertain we should be about these point estimates. A standard statistical model summary will tend to also report measures of uncertainty around the point estimates, in the form of standard errors. When these are implicitly combined with a Null hypothesis, namely that the 'true' value of a parameter may be zero, the point estimate together with its standard error allows the calculation of z values and p values.\n\nHow can we use `optim()` to return measures of uncertainty, which will allow the standard errors to be estimated as well as the point values?\n\nWe'll start with a weird analogy to get an intuition for how this can be done with `optim()`.\n\n### Barefoot and Blind: A weird analogy for a complicated idea \n\nImagine optim, your hill-finding robo-chauffeur, has taken you to the top of a likelihood surface. Then it leaves you there...\n\n... and you're blind, and have no shoes. (You also have an uncanny sense of your orientation, whether north-south, east-west, or some other angle.)\n\nSo, you know you're at the top of the hill, but you can't see what the landscape around you looks like. However, you still want to get a sense of this landscape, and how it varies around the spot you're standing on. \n\nWhat do you do? \n\n\nIf you're playing along with this weird thought experiment, one approach would be to use your feet as depth sensors. You make sure you never stray from where you started, and to always keep one foot planted on this initial spot (which you understand to be the highest point on the landscape). Then you use your other foot to work out how much further down the surface is from the highest point as you venture away from the highest point in different directions.\n\nSay you keep your left foot planted on the highest point, and make sure your right foot is always positioned (say) 10 cm horizontally from your left foot. Initially your two feet are arranged east-west; let's call this 0 degrees. When you put your right foot down, you notice it needs to travel 2 cm further down to reach terra ferma relative to your left foot. \n\n2cm at 0 degrees. You'll remember that. \n\nNow you rotate yourself 45 degrees, and repeat the same right foot drop. This time it needs to travel 3cm down relative to your left foot. \n\n3cm at 45 degrees. You remember that too. \n\nNow you rotate another 45 degrees, north-south orientation, place your right foot down; now it falls 5cm down relative to your left foot. \n\n2cm at 0 degrees; 3cm at 45 degrees; 5cm at 90 degrees. \n\nNow with this information, you try to construct the landscape you're on top of with your mind's eye, making the assumption that the way it has to have curved from the peak you're on to lead to the drops you've observed is consistent all around you; i.e. that there's only one hill, you're on top of it, and it's smoothly curved in all directions. \n\n\n### Information and uncertainty \n\nIf you could further entertain the idea that your feet are infinitely small, and the gap between feet is also infinitely small (rather than the 10cm above), then you have the intuition behind this scary-looking but very important formula from @King98 (p. 89):\n\n\n$$\n\\widehat{V(\\hat{\\theta})} = - \\frac{1}{n}[\\frac{\\delta^2lnL(\\tilde{\\theta}|y)}{\\delta \\tilde{\\theta} \\delta \\tilde{\\theta}^{'}}]^{-1}_{\\tilde{\\theta} = \\hat{\\theta}}\n$$\n\nWhat this is saying, in something closer to humanese, is something like:\n\n> Our best estimate of the amount of uncertainty we have in our estimates is a function of how much the likelihood surface curves at the highest point on the surface. (It also gets less uncertain, the more observations we have).\n\n\n\nAmongst the various bells, whistles and decals in the previous formula is the superscript $(.)^{-1}$. This means *invert*, which for a single value means $\\frac{1}{.}$ but for a matrix means something conceptually the same but technically not. \n\nAnd what's being *inverted* in the last formula? A horrible-looking expression, $[\\frac{\\delta^2lnL(\\tilde{\\theta}|y)}{\\delta \\tilde{\\theta} \\delta \\tilde{\\theta}^{'}}]_{\\tilde{\\theta} = \\hat{\\theta}}$, that's basically an answer to the question of *how curvy is the log likelihood surface at its peak position?* \n\nWithin @King98 (p.89, eq. 4.18), this expression (or rather the negative of the term) is defined as $I(\\hat{\\theta} | y)$, where $I(.)$ stands for **information**. \n\nSo, the algebra are saying\n\n> Uncertainty is inversely related to information\n\nOr perhaps even more intuitively\n\n> The more information we have, the less uncertain we are\n\nOf course this makes sense. If you ask someone \"How long will this task take?\", and they say \"Between one hour and one month\", they likely have less information about how long the task will actually than if they had said \"Between two and a half and three hours\". More generally:\n\n- **Shallow gradients** mean **wide uncertainty intervals** mean **low information**\n- **Sharp gradients** mean **narrow uncertaintly intervals** mean **high information**\n\n\nThis is, fundamentally, what the blind and barefoot person in the previous analogy is trying to achieve: by feeling out the local curvature around the highest point, they are trying to work out how much information they have about different pieces of the model. The curvature along any one dimension of the surface (equivalent to the 0 and 90 degree explorations) indicates how much information there is about any single coefficient, and the curvature along the equivalent of a 45 degree plane gives a measure of how associated any two coefficients tend to be. \n\n\nWith these many analogies and equations spinning in our heads, let's now see how these concepts can be applied in practice.\n\n### How to get `optim()` to return this information\n\nHaving reminded myself of the particular options for `optim` that are typically used to report parameter uncertainty, let's run the follows:\n\n\n```{r}\nfuller_optim_output <- optim(\n    par = c(0, 0, 0), \n    fn = llNormal,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\n\n```\n\nWe have used a slightly different algorithm ('BFGS'), and a different way of specifying the function to search over (using `fnscale = -1` to invert the likelihood), but we have the same `par` estimates as before: $\\beta = \\{\\beta_0 = 2.46, \\beta_1 = 1.38\\}$. So the changes we've made to the `optim` arguments haven't changed what it estimates. \n\nOne new argument we've set in `optim` is `hessian = TRUE`. [Hessian](https://en.wikipedia.org/wiki/Hessian_fabric) is a kind of coarse fabric made from vegetable waste, typically woven in a criss-crossing, grid-like pattern. Hessian matrices are matrices of second derivatives, as described in [the wikipedia article](https://en.wikipedia.org/wiki/Hessian_matrix). [^7] If you can bear to recall the really complex expression above, for calculating the curvature around a point on a surface, you'll recall it's also about second derivatives. \n\nNone of this is a coincidence. The `hessian` component of the optim output above contains what we need. \n\n[^7]: Though I had assumed Hessian matrices are called Hessian matrices because they sort-of resemble the criss-crossing grids of Hessian bags, they're actually named after [Otto Hesse](https://en.wikipedia.org/wiki/Otto_Hesse), who proposed them.\n\n```{r}\nhess <- fuller_optim_output$hessian\nhess\n```\n\nYou might notice that the Hessian matrix is square, with as many columns as rows. And, that the number of columns (or rows) is equal to the number of parameters we have estimated, i.e. three in this case. \n\nYou might also notice that the values are symmetrical about the diagonal running from the top left to the bottom right. \n\nAgain, this is no accident. \n\n\nRemember that variation is inversely related to information, and that $(.)^{-1}$ is the inversion operator on $I(.)$, the Information Matrix. Well, this Hessian *is* (pretty much) $I(.)$. So let's see what happens when we invert it (using the `solve` operator):\n\n```{r}\ninv_hess <- solve(-hess)\ninv_hess\n```\n\nAs with `hess`, `inv_hess` is symmetric around the top-left to bottom-right diagonal. For example, the value on row 2 and column 1 is the same as on row 1, column 2. \n\nWe're mainly interested in the first two columns and rows, as these contain the values most comparable with the glm summary reports \n\n```{r}\ninv_hess_betas <- inv_hess[1:2, 1:2]\n\ninv_hess_betas\n```\n\nWhat the elements of the above matrix provide are estimates of the *variances* of a single parameter $\\beta_j$, and/or the *covariances* between any two parameters $\\{\\beta_0, \\beta_1\\}$. In this example:\n\n$$\n\\begin{bmatrix}\nvar(\\beta_0) & cov(\\beta_0, \\beta_1) \\\\\ncov(\\beta_1, \\beta_0) & var(\\beta_1)\n\\end{bmatrix}\n$$\n\nIt's because the on-diagonal terms are variances of uncertaintly for a single term, that it can be useful to take the square root of these terms to get estimates of the standard errors:\n\n```{r}\nsqrt(diag(inv_hess_betas))\n```\n\nCompare with the `Std Err` term in the following:\n\n```{r}\nsummary(mod_glm)\n\n```\n\nThe estimates from the Hessian in optim, of $\\{0.18, 0.07\\}$, are not exactly the same as the $\\{0.21, 0.08\\}$ reported for `mod_glm`; the methods employed are not identical. But they are hopefully similar enough to demonstrate they provide similar information about similar quantities of uncertainty. \n\nBack in part five, we used this same dataset to show how the log likelihood varies for various, equally spaced, candidate values for $\\beta_0$ and $\\beta_1$ (having fixed $\\eta = \\exp({\\sigma^2})$ at its true value). This led to the followng map of the landscape[^8]\n\n```{r}\nlibrary(tidyverse)\ncandidate_param_values <- expand_grid(\n    beta_0 = seq(-15, 15, by = 0.05),\n    beta_1 = seq(-15, 15, by = 0.05)\n)\n\nfeed_to_ll <- function(b0, b1){\n    pars <- c(b0, b1, log(0.25))\n    llNormal(pars, y, X)\n}\n\ncandidate_param_values <- candidate_param_values |>\n    mutate(\n        ll = map2_dbl(beta_0, beta_1, feed_to_ll)\n    )\n\ncandidate_param_values |>\n    ggplot(aes(beta_0, beta_1, z = ll)) + \n    geom_contour_filled() + \n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) +\n    labs(\n        title = \"Log likelihood as a function of possible values of beta_0 and beta_1\",\n        x = \"beta0 (the intercept)\",\n        y = \"beta1 (the slope)\"\n    )\n```\n\n[^8]: I've narrowed the space between values slightly, and increased the range of permutations of values to search through, for an even more precise recovery of the likelihood landscape. \n\nWithin the above we can see that the log likelihood landscape for these two parameters looks like a bivariate normal distribution, we can also see a bit of a slant in this normal distribution. This implies a *correlation* between the two candidate values. The direction of the slant is downwards from left to right, implying the correlation is negative. \n\nFirstly let's check that the correlation between $\\beta_0$ and $\\beta_1$ implied by the Hessian *is* negative. These are the off-diagonal elements, either first row, second column, or second row, first column:\n\n```{r}\ninv_hess_betas[1,2]\ninv_hess_betas[2,1]\n```\n\nYes they are!\n\n\nAs mentioned previously, the likelihood surface produced by the gridsearch method involves a lot of computations, so a lot of steps, and likely a lot of trial and error, if it were to be used to try to find the maximum likelihood value for the parameters. By contrast, the `optim()` algorithm typically involves far fewer steps, 'feeling' its way up the hill until it reaches a point where there's nowhere higher. [^9] When it then reaches this highest point, it then 'feels' the curvature around this point in multiple directions, producing the Hessian. The algorithm doesn't *see* the likelihood surface, because it hasn't travelled along most of it. But the Hessian can be used to *infer* the likelihood surface, subject to subject (usually) reasonable assumptions.\n\n[^9]: In practice, the algorithm seeks to minimise the value returned by the function, not maximise it, hence the negative being applied through the argument `fnscale = -1` in the `control` argument. But the principle is identical. \n\nWhat are these (usually) reasonable assumptions? Well, that the likelihood surface can be approximated by a multivariate normal distribution, which is a generalisation of the standard Normal distribution over more than one dimensions.[^10]\n\n[^10]: This means that, whereas the standard Normal returns a single output, the Multivariate Normal returns a vector of outputs, one for each parameter in $\\theta$, which should also be the length of the diagonal (or alternatively either the number of rows or columns) of $\\Sigma$. \n\nWe can use the `mvrnorm` function from the `MASS` package, alongside the point estimates and Hessian from `optim`, in order to produce estimates of $\\theta = \\{ \\beta_0, \\beta_1, \\eta \\}$ which represent reasonable uncertainty about the true values of each of these parameters. Algebraically, this can be expressed as something like the following:\n\n$$\n\\tilde{\\theta} \\sim Multivariate Normal(\\mu = \\dot{\\theta}, \\sigma^2 = \\Sigma)\n$$\n\nWhere $\\dot{\\theta}$ are the point estimates from `optim()` and $\\Sigma$ is the implied variance-covariance matrix recovered from the Hessian. \n\nLet's create this MVN model and see what kinds of outputs it produces. \n\n\n```{r}\nlibrary(MASS)\n\npoint_estimates <- fuller_optim_output$par\n\nvcov <- -solve(fuller_optim_output$hessian)\nparam_draws <- MASS::mvrnorm(\n    n = 10000, \n    mu = point_estimates, \n    Sigma = vcov\n)\n\ncolnames(param_draws) <- c(\n    \"beta0\", \"beta1\", \"eta\"\n)\n\nhead(param_draws)\n```\n\nWe can see that `mvrnorm()`, with these inputs from `optim()` produces three columns: one for each parameter being estimated $\\{ \\beta_0, \\beta_1, \\eta \\}$. The `n` argumment indicates the number of draws to take; in this case, 10000. This number of draws makes it easier to see how much variation there is in each of the estimates. \n\n```{r}\ndf_param_draws <- \nparam_draws |>\n    as_tibble(\n        rownames = 'draw'\n    ) |>\n    mutate(\n        sig2 = exp(eta)\n    ) |>\n    pivot_longer(\n        -draw, \n        names_to = \"param\",\n        values_to = \"value\"\n    ) \n    \ndf_param_draws |>\n    ggplot(aes(x = value)) + \n    geom_density() + \n    facet_grid(param ~ .) + \n    geom_vline(xintercept=0)\n\n```\n\nThere are a number of things to note here: firstly, that the average of the $\\beta_0$ and $\\beta_1$ values appear close to their known 'true' values of 2.5 and 1.4 respectively. Secondly, that whereas the $\\eta$ values are normally distributed, the $\\sigma^2$ values derived from them are not, and are never below zero; this is the effect of the exponential link between quantities. Thirdly, that the implied values of $\\sigma^2$ do appear to be centred around `0.25`, as they should be as $\\sigma$ was set to `0.50` in the model. \n\nAnd forthly, that the density around $\\beta_1$ is more peaked than around $\\beta_0$. This concords with what we saw previously in the filled contour map: both the horizontal `beta0` axis and vertical `beta1` axis are on the same scale, but the oval is broader along the horizontal axis than the vertical axis. This in effect implies that we have more information about the true value of $\\beta_1$, the slope, than about the true value of $\\beta_0$, the intercept. \n\nWe can also use these draws to reproduce something similar to, but not identical to, [^11] the previous filled contour map:\n\n```{r}\n# param_draws |>\n#     as_tibble(\n#         rownames = 'draw'\n#     ) |>\n#     ggplot(aes(x = beta0, y = beta1)) + \n#     geom_point(alpha = 0.1) + \n#     coord_cartesian(xlim = c(-10, 10), ylim = c(-10, 10))\n\nparam_draws |>\n    as_tibble(\n        rownames = 'draw'\n    ) |>\n    ggplot(aes(x = beta0, y = beta1)) + \n    geom_density_2d_filled() + \n    coord_equal()\n\n```\n\n[^11]: The values will not be identical because the values for $\\eta$, and so $\\sigma^2$, have not been fixed at the true value in this example. \n\nOnce again, we see the same qualities as the contour map produced by interrogating the likelihood surface exhaustively: the distribution appears bivariate normal; there is a greater range in the distribution along the `beta0` than the `beta1` axis; and there is evidence of some negative correlation between the two parameters.\n\n### Summary\n\nThis post has shown how `optim()`, which in its vanilla state only returns point estimates, can be configured to also calculater and report the Hessian, a record of instantaneous curvature around the point estimates. Even without a fine-grained and exhausive search throughout the likelihood surface, this measure of curvature can be used to produce similar measures of uncertainty to the more exhausive approach, in a fraction of the number of computations. \n\nMore importantly, it can be used to generate draws of plausible combinations of parameter values, something denoted as $\\tilde{\\theta}$ earlier. This is something especially useful for producing *honest quantities of interest*, which both tell users of models something they want to know, while also representing how uncertain we are in this knowledge. \n\n## Quantities of interest\n\nWe'll now, finally, show how this knowledge can be applied to do something with statistical models that ought to be done far more often: report on what @KinTomWit00 calls **quantities of interest**, including *predicted values*, *expected values*, and *first differences*. Quantities of interest *are not* the direction and statistical significance (P-values) that many users of statistical models convince themselves matter, leading to the kind of mindless stargazing summaries of model outputs [described in section one](../intro-to-glms/index.qmd). Instead, they're the kind of questions that someone, *not trained to think that stargazing is satisfactory*, might reasonably want answers to. These might include: \n\n- What is the expected income of someone who completes course X in the five years after graduation? (*Expected values*)\n- What is the expected range of incomes of someone who completes course X in the five years after graduation? (*Predicted values*)\n- What is the expected difference in incomes between someone who completes course X, compared to course Y, in the five years after graduation? (*First Differences*)\n\nIn [section one](../intro-to-glms/index.qmd), we showed how to answer some of the questions of this form, for both standard linear regression and logistic regression. We showed that for linear regression such answers tend to come directly from the summary of coefficients, but that for logistic regression such answers tend to be both more ambiguous and dependent on other factors (such as gender of graduate, degree, ethnicity, age and so on), and require more processing in order to produce estimates for. \n\nHowever, we previously produced only *point estimates* for these questions, and so in a sense misled the questioner with the apparent certainty of our estimates. We now know, from earlier in this section, that we can use information about parameter uncertainty to produce parameter estimates $\\tilde{\\theta}$ that *do* convey parameter uncertainty, and so we can do better than the point estimates alone to answer such questions in way that takes into account such uncertainty, with a range of values rather than a single value. \n\n### Method \n\nLet's make use of our toy dataset one last time, and go through the motions to produce the $\\tilde{\\theta}$ draws we ended with on the last post:\n\n```{r}\nllNormal <- function(pars, y, X){\n    beta <- pars[1:ncol(X)]\n    sigma2 <- exp(pars[ncol(X)+1])\n    -1/2 * (sum(log(sigma2) + (y - (X%*%beta))^2 / sigma2))\n}\n```\n\n```{r}\n# set a seed so runs are identical\nset.seed(7)\n# create a main predictor variable vector: -3 to 5 in increments of 1\nx <- (-3):5\n# Record the number of observations in x\nN <- length(x)\n# Create a response variable with variability\ny <- 2.5 + 1.4 * x  + rnorm(N, mean = 0, sd = 0.5)\n\n# bind x into a two column matrix whose first column is a vector of 1s (for the intercept)\n\nX <- cbind(rep(1, N), x)\n# Clean up names\ncolnames(X) <- NULL\n\n```\n\n\n```{r}\n\nfuller_optim_output <- optim(\n    par = c(0, 0, 0), \n    fn = llNormal,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\nhess <- fuller_optim_output$hessian\ninv_hess <- solve(-hess)\ninv_hess\n\n```\n\n\n```{r}\npoint_estimates <- fuller_optim_output$par\n\nvcov <- -solve(fuller_optim_output$hessian)\nparam_draws <- MASS::mvrnorm(\n    n = 10000, \n    mu = point_estimates, \n    Sigma = vcov\n)\n\ncolnames(param_draws) <- c(\n    \"beta0\", \"beta1\", \"eta\"\n)\n\n```\n\nLet's now look at our toy data again, and decide on some specific questions to answer:\n\n```{r}\nlibrary(tidyverse)\ntoy_df <- tibble(x = x, y = y)\n\ntoy_df |> \n    ggplot(aes(x = x, y = y)) + \n    geom_point() \n\n\n```\n\nWithin the data itself, we have only supplied x and y values for whole numbers of x between -3 and 5. But we can use the model to produce estimates for non-integer values of x. Let's try 2.5. For this single value of x, we can produce both *predicted values* and *expected values*, by passing the same value of x to each of the plausible estimates of $\\theta$ returned by the multivariate normal function above. \n\n```{r}\ncandidate_x <- 2.5\n```\n\n\n### Expected values \n\nHere's an example of estimating the expected value of y for x = 2.5 using loops and standard algebra:\n\n```{r}\n# Using standard algebra and loops\nN <- nrow(param_draws)\nexpected_y_simpler <- vector(\"numeric\", N)\nfor (i in 1:N){\n    expected_y_simpler[i] <- param_draws[i, \"beta0\"] + candidate_x * param_draws[i, \"beta1\"]\n}\n\nhead(expected_y_simpler)\n\n```\n\nWe can see just from the first few values that each estimate is slightly different. Let's order the values from lowest to highest, and find the range where 95% of values sit:\n\n```{r}\nev_range <- quantile(expected_y_simpler,  probs = c(0.025, 0.500, 0.975)) \n\nev_range\n```\n\nThe 95% interval is therefore between `5.51` and `6.29`, with the median (similar but not quite the point estimate) being `5.90`. Let's plot this against the data: \n\n```{r}\n\ntoy_df |> \n    ggplot(aes(x = x, y = y)) + \n    geom_point() + \n    annotate(\"point\", x = candidate_x, y =  median(expected_y_simpler), size = 1.2, shape = 2, colour = \"blue\") + \n    annotate(\"segment\", x = candidate_x, xend=candidate_x, y = ev_range[1], yend = ev_range[3], colour = \"blue\")\n\n```\n\nThe vertical blue line therefore shows the range of estimates for $Y|x=2.5$ that contain 95% of the expected values given the draws of $\\beta = \\{\\beta_0, \\beta_1\\}$ which we produced from the Multivariate Normal given the point estimates and Hessian from `optim()`. This is our estimated range for the *expected value*, not *predicted value*. What's the difference? \n\n### Predicted values\n\nOne clue about the difference between expected value lies in the parameters from `optim()` we did and did not use: Whereas we have both point estimates and uncertainty estimates for the parameters $\\{\\beta_0, \\beta_1, \\sigma^2\\}$,[^12] we only made use of the the two $\\beta$ parameters when producing this estimate. \n\n[^12]:Where $\\sigma^2$ is from $\\eta$ and we defined $e^{\\eta} = \\sigma^2$, a transformation which allowed `optim()` to search over an unbounded rather than bounded real number line\n\nNow let's recall the general model formula, from the start of @KinTomWit00, which we repeated for the first few posts in the series:\n\n**Stochastic Component**\n\n$$\nY_i \\sim f(\\theta_i, \\alpha)\n$$\n\n**Systematic Component**\n\n$$\n\\theta_i = g(X_i, \\beta)\n$$\n\n\nThe manual for Zelig, the (now defunct) R package that used to support analysis using this approach, states that for Normal Linear Regression [these two components are resolved as follows](https://docs.zeligproject.org/articles/zelig_normal.html#model):\n\n**Stochastic Component**\n\n$$\nY_i \\sim Normal(\\mu_i, \\sigma^2)\n$$\n\n**Systematic Component**\n\n$$\n\\mu_i = x_i \\beta\n$$\n\nThe page then goes onto state that the *expected value*, $E(Y)$, is :\n\n$$\nE(Y) = \\mu_i = x_i \\beta\n$$\n\nSo, in this case, the expected value is the systematic component only, and does not involve the dispersion parameter in the stochastic component, which for normal linear regression is the $\\sigma^2$ term. That's why we didn't use estimates of $\\sigma^2$ when simulating the expected values. \n\nBut why is this? Well, it comes from the expectation operator, $E(.)$. This operator means something like, *return to me the value that would be expected if this experiment were performed an infinite number of times*. \n\nThere are two types of uncertainty which give rise to variation in the predicted estimate: *sampling uncertainty*, and *stochastic variation*. In the expected value condition, this second source of variation falls to zero,[^13] leaving only the influence of sampling uncertainty, as in uncertainty about the true value of the $\\beta$ parameters, remaining on uncertainty on the predicted outputs. \n\n[^13]: It can be easier to see this by using the more conventional way of expressing Normal linear regression: $Y_i = x_i \\beta + \\epsilon$, where $\\epsilon \\sim Normal(0, \\sigma^2)$. The expectation is therefore $E(Y_i) = E( x_i \\beta + \\epsilon ) = E(x_i \\beta) + E(\\epsilon)$. For the first part of this equation, $E(x_i \\beta) = x_i \\beta$, because the systematic component is always the same value, no matter how many times a draw is taken from the model. And for the second part, $E(\\epsilon) = 0$, because Normal distributions are symmetrical around their central value over the long term: on average, every large positive value drawn from this distribution will become cancelled out by an equally large negative value, meaning the expected value returned by the distribution is zero. Hence, $E(Y) = x_i \\beta$.\n\nFor *predicted values*, we therefore need to reintroduce *stochastic variation* as a source of variation in the range of estimates produced. Each $\\eta$ value we have implies a different $\\sigma^2$ value in the stochastic part of the equation, which we can then add onto the variation caused by parameter uncertainty alone: \n\n```{r}\nN <- nrow(param_draws)\npredicted_y_simpler <- vector(\"numeric\", N)\nfor (i in 1:N){\n    predicted_y_simpler[i] <- param_draws[i, \"beta0\"] + candidate_x * param_draws[i, \"beta1\"] + \n        rnorm(\n            1, mean = 0, \n            sd = sqrt(exp(param_draws[i, \"eta\"]))\n        )\n}\n\nhead(predicted_y_simpler)\n\n\n```\n\nLet's now get the 95% prediction interval for the predicted values, and compare them with the expected values predicted interval earlier\n\n```{r}\npv_range <- \n    quantile(\n        predicted_y_simpler, \n        probs = c(0.025, 0.500, 0.975)\n    )\n\npv_range\n```\n\nSo, whereas the median is similar to before, `5.90`, the 95% interval is now from `4.77` to `7.06`[^14]. This compares with the `5.51` to `6.29` range for the expected values. Let's now plot this predicted value range just as we did with the expected values:\n\n[^14]: Because these estimates depend on random variation, these intervals may be slightly different to two decimal places than the values I'm quoting here.\n\n```{r}\ntoy_df |> \n    ggplot(aes(x = x, y = y)) + \n    geom_point() + \n    annotate(\"point\", x = candidate_x, y =  pv_range[2], size = 1.2, shape = 2, colour = \"blue\") + \n    annotate(\"segment\", x = candidate_x, xend=candidate_x, y = pv_range[1], yend = pv_range[3], colour = \"red\")\n\n```\n\nClearly considerably wider. \n\n\n## Log likelihood for logistic regression \n\nPreviously we derived the log likelihood for Normal (Gaussian) regression and did some cool things with it. Let's now do the same with logistic regression. We need to start with definition, then calculate log likelihood, then write it as a function in R that `optim()` can work its magic with. \n\n\nAccording to [the relevant section of the Zelig website](https://docs.zeligproject.org/articles/zelig_logit.html#model-definition):\n\n**Stochastic component**\n$$\nY_i \\sim Bernoulli(y_i | \\pi_i )\n$$\n\n$$\nY_i = \\pi_i^{y_i}(1 - \\pi_i)^{1-y_i}\n$$\n\nwhere $\\pi_i = P(Y_i = 1)$\n\nAnd \n\n**Systematic Component**\n\n$$\n\\pi_i = \\frac{1}{1 + \\exp{(-x_i \\beta)}}\n$$\n\nThe likelihood is the product of the above for all observations in the dataset $i \\in N$\n\n$$\nL(.) = \\prod{\\pi_i^{y_i}(1 - \\pi_i)^{1-y_i}}\n$$\n\nThe effect of logging the above[^15]:\n\n$$\n\\log{L(.)} = \\sum{[y_i \\log{\\pi_i} + (1-y_i)\\log{(1-y_i)}]}\n$$\n\nThis can now be implemented as a function: \n\n```{r}\nllogit <- function(par, y, X){\n    xform <- function(z) {1 / (1 + exp(-z))}\n    p <- xform(X%*%par)\n    sum(y * log(p) + (1-y) * log(1 - p))\n}\n\n```\n\nLet's pick an appropriate dataset. How about... picking a [Palmer Penguin](https://allisonhorst.github.io/palmerpenguins/)!?\n\n```{r}\nlibrary(tidyverse)\npalmerpenguins::penguins\n\n```\n\nLet's say we want to predict whether a penguin is of the Chinstrap species\n\n```{r}\npalmerpenguins::penguins %>%\n    filter(complete.cases(.)) |>\n    mutate(is_chinstrap = species == \"Chinstrap\") |>\n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, colour = is_chinstrap, shape = sex)) + \n    geom_point()\n\n```\n\nNeither bill length nor bill depth alone appears to distinguish between chinstrap and other species. But perhaps the interaction (product) of the two terms would do:\n\n```{r}\npalmerpenguins::penguins %>%\n    filter(complete.cases(.)) |>\n    mutate(is_chinstrap = species == \"Chinstrap\") |>\n    mutate(bill_size = bill_length_mm * bill_depth_mm) |>\n    ggplot(aes(x = bill_size, fill = is_chinstrap)) + \n    facet_wrap(~sex) + \n    geom_histogram()\n\n```\n\nThe interaction term isn't great at separating the two classes, but seems to be better than either length or size alone. So I'll include it in the model. \n\n```{r}\ndf <- palmerpenguins::penguins %>%\n    filter(complete.cases(.)) |>\n    mutate(is_chinstrap = species == \"Chinstrap\") |>\n    mutate(bill_size = bill_length_mm * bill_depth_mm) |>\n    mutate(is_male = as.numeric(sex == \"male\"))\n\ny <- df$is_chinstrap\n\nX <- cbind(1, df[,c(\"bill_length_mm\", \"bill_depth_mm\", \"bill_size\", \"is_male\")]) |>\nas.matrix()\n\n```\n\nSo, including the intercept term, our predictor matrix $X$ contains 5 columns, including the interaction term `bill_size`. [^16]\n\nLet's try now to use the above in `optim()`\n\n```{r}\nfuller_optim_output <- optim(\n    par = rep(0, 5), \n    fn = llogit,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\nhess <- fuller_optim_output$hessian\ninv_hess <- solve(-hess)\ninv_hess\n\n```\n\nNow let's compare with `glm()`\n\n```{r}\nmod_glm <- glm(is_chinstrap ~ bill_length_mm * bill_depth_mm +is_male, data = df, \nfamily = binomial())\nsummary(mod_glm)\n```\n\nUh oh! On this occasion it appears one or both approaches have become confused. A five dimensional search space might be too much for the algorithms to cope with, especially with collinearity [^17] between some of the terms. Let's simplify the task a bit, and just use intercept, bill size, and is_male as covariates. First with the standard package:\n\n```{r}\nmod_glm_simpler <- glm(is_chinstrap ~ bill_size +is_male,   data = df, \nfamily = binomial())\nsummary(mod_glm_simpler)\n\n```\n\nAnd now with the bespoke function and optim\n\n```{r}\nX <- cbind(1, df[,c(\"bill_size\", \"is_male\")]) |>\nas.matrix()\n\nfuller_optim_output <- optim(\n    par = rep(0, 3), \n    fn = llogit,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\nhess <- fuller_optim_output$hessian\ninv_hess <- solve(-hess)\ninv_hess\n\n```\n\nThe estimates from the two approaches are now much closer, even if they aren't as close to each other as in the earlier examples. Using `optim()`, we have parameter estimates $\\beta = \\{\\beta_0 = -32.60, \\beta_1 = 0.04, \\beta_2 = -6.99\\}$, and using `glm()`, we have estimates $\\beta = \\{\\beta_0 = -32.82, \\beta_1 = 0.04, \\beta_2 = -7.04 \\}$ \n\nIf we cheat a bit, and give the five dimensional version starting values closer to the estimates from `glm()`, we can probably get similar estimates too. \n\n```{r}\nX <- cbind(1, df[,c(\"bill_length_mm\", \"bill_depth_mm\", \"bill_size\", \"is_male\")]) |>\nas.matrix()\n\nfuller_optim_output <- optim(\n    par = c(300, -10, -29, 0.5, -10), \n    fn = llogit,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\nhess <- fuller_optim_output$hessian\ninv_hess <- solve(-hess)\ninv_hess\n\n\n\n```\n\nWell, they are *closer*, but they aren't *very close*. As mentioned, the `glm()` model produced warnings, and some of the variables are likely to be collinear, so this initial specification may have been especially difficult to fit. Both approaches found an answer, but neither seem happy about it! \n\n\n### Summary\n\nIn the exercise above we did for logistic regression what the previous few posts in section two did for standard regression: i.e. we derived the log likelihood, applied it using optim, and compared with results from the `glm()` package. We saw in this case that fitting models isn't always straightforward. We were - well, I was - overly ambitious in building and applying an overly parameterised model specification. But we eventually got to similar parameter values using both approaches. \n\nThough this wasn't as straightforward as I was hoping for, I'm presenting it warts-and-all. In principle, the log-likelihood maximisation approach generalises to a great many model specifications, even if in practice some model structures aren't as straightforward to fit as others. \n\n\n\n[^15]: Thanks to [this post](https://arunaddagatla.medium.com/maximum-likelihood-estimation-in-logistic-regression-f86ff1627b67). My calculus is a bit rusty these days.\n\n[^16]: An important point to note is that, though bill_size is derived from other variables, it's its own variable, and so has another distinct 'slot' in the vector of $\\beta$ parameters. It's just another dimension in the search space for optim to search through. \n\n[^17]: This is fancy-speak for when two terms aren't independent, or both adding unique information. For example, length in mm, length in cm, and length in inches would all be perfectly collinear, so shouldn't all be included in the model. ","srcMarkdownNoYaml":"\n\nIn [the first part of the course](../intro-to-glms/index.qmd), I stated that statistical model fitting, within the generalised model framework presented in @KinTomWit00, involves adjusting candidate values for elements of $\\beta = \\{\\beta_0, \\beta_1, ..., \\beta_K \\}$ such that the difference between what the model predicts given some predictor values, $Y_i | X_i$, and what has been observed alongside the predictors, $y_i$, is minimised on average[^1] in some way.\n\n[^1]: If $Y_i$ is what the model predicts given observations $X_i$, and $y_i$ is the outcome observed to have occurred alongside $X_i$, then we can call $\\delta_i = h(y_i, Y_i)$ the difference, or error, between predicted and observed value. The function $h(.,.)$ is typically the squared difference between predicted and observed values, $(Y_i - y_i)^2$, but could also in principle be the absolute difference $|Y_i - y_i|$. Term-fitting algorithms usually compare not any individual $\\delta_i$, but a sum of these error terms $\\delta$. The aim of the algorithm is to find the set of $\\beta$ terms that is least wrong for the whole dataset $D$, rather than any specific row in the dataset $D_i$.  \n\nThe aim of this post is to show how this process is typically implemented in GLMs, using likelihood theory. \n\n## Bayes' Rule and Likelihood \n\nStatisticians and more advanced users of statistical models often divide themselves into 'frequentists' and 'Bayesians'. To some extent the distinction is really between 'improper Bayesians' and 'proper Bayesians', however, as Bayes' Rule is at the root of both approaches. [Bayes' Rule](https://en.wikipedia.org/wiki/Bayes%27_theorem) is:\n\n$$\nP(A|B) = \\frac{P(B|A)P(A)}{P(B)}\n$$\n\nNote in the above the left hand side of the equation is $P(A|B)$ and the right hand side of the equation *includes* $P(B|A)$. To write it out as awkward prose, therefore, Bayes' Rule is a way of expressing **that given this** in terms of **this given that**. \n\nAs with much of algebra, $A$ and $B$ are just placeholders. We could instead use different symbols instead, such as: \n\n$$\nP(\\tilde{\\theta} | y) = \\frac{P(y | \\tilde{\\theta})P(\\tilde{\\theta})}{P(y)}\n$$\n\n\nLikelihood theory offers a way of thinking about how good a model is in terms of its relationship to the data. According to @King98 (p. 59), it can be expressed as: \n\n$$\nL(\\tilde{\\theta}| y) = k(y) P(y | \\tilde{\\theta}) \n$$\n\nOr \n\n$$\nL(\\tilde{\\theta} | y) \\propto P(y | \\tilde{\\theta})\n$$\n\nWhere $\\tilde{\\theta}$ is a proposed parameter or parameter combination for the model, and $y$ is the observed outcome.[^2] \n\n[^2]: As @King98 (p. 59) describes it, \"$k(y)$ is an unknown fuction of the data. Whereas traditional probability is a measure of *absolute* uncertainty ... the constant $k(y)$ means that likelihood is only a *relative* measure of uncertainty\"\n\nThe important thing to note is that both Bayes' Rule and Likelihood Theory are ways of expressing **this given that** as a function of **that given this**. Specifically, the model given the data, as a function of the data given the model. [^3]\n\n\n[^3]: Frequentist approaches can thus be considered a kind of 'improper Bayesian' approach by considering $k(y)$ in the Likelihood formula as a stand-in for $\\frac{P(\\tilde{\\theta})}{P(y)}$ in Bayes' Rule. Roughly speaking, it's because of the improperness of treating the two terms as equivalent, and the relativeness of $k(y)$, that mean frequentist probability statements can't be interpreted as Bayesian probability statements. But thinking of the two terms as equivalent can be helpful for spotting the similarity between the two formulae. \n\n## Likelihood for linear regression \n\nWhen, many years ago, I completed [the course](https://scholar.harvard.edu/msen/classes/government-2001-advanced-quantitative-research-methodology-professor-gary-king) from this modelling framework is most associated, a hazing ritual employed near the start of the course was to require participants to derive the likelihood of different model specifications. However, I don't feel like hazing myself right now, so instead we can use the derivation shown on [slide 8 of these slides](https://scholar.harvard.edu/files/msen/files/sen_gov2001_section5.pdf): \n\n$$\nL(\\beta, \\sigma^2 | y) = \\prod{L(y_i | \\mu_i, \\sigma^2)}\n$$\n\nWhere $\\mu = X \\beta$, $i$ indicates an observation in the data (a row of $X$ when $X$ is in matrix form), and $\\prod$ indicates the likelihoods from each observation should be multiplied with each other to derive the overall likelihood for all observed data.\n\nIn practice the log Likelihood, rather than the likelihood itself, is used, because this allows calculation of a sum of terms ($\\sum$) rather than product of terms ($\\prod$), and the latter tends to be computationally easier to calculate. \n\nAs we are interested only in how likelihood varies as a function of those model parameters we wish to estimate, $\\theta = \\{\\beta, \\sigma^2\\}$, some of the terms in the log likelihood expression can be omitted, leaving us with:\n\n$$\n\\log{L(\\beta, \\sigma^2 | y)} \\doteq \\sum{-\\frac{1}{2}[\\log{\\sigma^2} + \\frac{(y_i - X_i\\beta)^2}{\\sigma^2}]}\n$$\n\nFor all the complexity of the above expression, at heart it takes three inputs:\n\n- $\\theta = \\{\\beta, \\sigma^2\\}$ : The candidate *parameters* for the model. \n- $y$ : the observed **response** value from the dataset $D$\n- $X$ : the observed **predictor** values from the dataset $D$\n\nAnd returns one value, the log likelihood $\\log{L(.)}$. \n\nTo reiterate, we can't change the data, but we can keep changing the candidate parameters $\\theta$. Each time we do so, $\\log{L(.)}$ will change too. \n\n*The aim of model calibration, in the Likelihood framework, is to maximise the Likelihood.* The parameter set that maximises the likelihood is also the parameter set that maximises the log likelihood. \n\nTo continue the example from the slides, we can write out a function for calculating the log likelihood of standard linear regression as follows:\n\n```{r}\n#| echo: true\nllNormal <- function(pars, y, X){\n    beta <- pars[1:ncol(X)]\n    sigma2 <- exp(pars[ncol(X)+1])\n    -1/2 * (sum(log(sigma2) + (y - (X%*%beta))^2 / sigma2))\n}\n```\n\nIn the above, `pars` is (almost but not quite) $\\theta$, the parameters to estimate. For standard linear regression $\\theta = \\{\\beta, \\sigma^2\\}$, where $\\beta = \\{\\beta_0, \\beta_1, ..., \\beta_k\\}$, i.e. a vector of beta parameters, one for each column (variable) in $X$, the predictor matrix of observations; this is why $beta$ is selected from the first K values in `pars` where K is the number of columns in $X$. \n\nThe last value in `pars` is used to derive the proposed $\\sigma^2$. If we call this last value `eta` ($\\eta$), then we can say $\\sigma^2 = e^{\\eta}$. So, whereas $\\theta$ is a vector that 'packs' $\\beta$ and $\\sigma^2$ into a single ordered series of values, `pars` packs `eta` in place of $\\sigma^2$. This substitution of `eta` for $\\sigma^2$ is done to make it easier for standard parameter fitting algorithms to work, as they tend to operate over the full real number range, rather than just over positive values. \n\nIn order to illustrate how the log likelihood function `llNormal` works in practice, let's construct a simple toy dataset $D$, and decompose $D = \\{y, X\\}$, the two types of data input that go into the `llNormal` function. \n\n```{r}\n# set a seed so runs are identical\nset.seed(7)\n# create a main predictor variable vector: -3 to 5 in increments of 1\nx <- (-3):5\n# Record the number of observations in x\nN <- length(x)\n# Create a response variable with variability\ny <- 2.5 + 1.4 * x  + rnorm(N, mean = 0, sd = 0.5)\n\n# bind x into a two column matrix whose first column is a vector of 1s (for the intercept)\n\nX <- cbind(rep(1, N), x)\n# Clean up names\ncolnames(X) <- NULL\n\n```\n\nIn the code above we have created $y$, a vector of nine observed responses; and $X$, a matrix of predictors with two columns (the number of variables for which $beta$ terms need to be estimated) and nine rows (the number of observations). \n\nGraphically, the relationship between x and y looks as follows:\n\n```{r}\nlibrary(tidyverse)\ntibble(x=x, y=y) |>\n    ggplot(aes(x, y)) + \n    geom_point()\n\n```\n\nIn this toy example, but almost never in reality, we *know* the correct parameters for the model. These are ${\\beta_0 = 2.5, \\beta_1 = 1.4}$ and $\\sigma^2 = 0.25$. [^4] Soon, we will see how effectively we can use optimisation algorithms to recover these true model parameters. But first, let's see how the log likelihood varies as a function jointly of different candidate values of $\\beta_0$ (the intercept) and $\\beta_1$ (the slope parameter), if we already set $\\sigma^2$ to `0.25`. \n\n\n[^4]: i.e. the square of the `sd` passed to `rnorm()` of 0.5\n\n\n```{r}\n\ncandidate_param_values <- expand_grid(\n    beta_0 = seq(-5, 5, by = 0.1),\n    beta_1 = seq(-5, 5, by = 0.1)\n)\n\nfeed_to_ll <- function(b0, b1){\n    pars <- c(b0, b1, log(0.25))\n    llNormal(pars, y, X)\n}\n\ncandidate_param_values <- candidate_param_values |>\n    mutate(\n        ll = map2_dbl(beta_0, beta_1, feed_to_ll)\n    )\n```\n\n```{r}\ncandidate_param_values |>\n    ggplot(aes(beta_0, beta_1, z = ll)) + \n    geom_contour_filled() + \n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) +\n    labs(\n        title = \"Log likelihood as a function of possible values of beta_0 and beta_1\",\n        x = \"beta0 (the intercept)\",\n        y = \"beta1 (the slope)\"\n    )\n```\n\nLooking at this joint surface of values, we can see a 'hotspot' where $\\beta_0$ is around 2.5, and $\\beta_1$ is around 1.4, just as we should expect. We can check this further by filtering candidate_param_values on the highest observed values of ll.\n\n```{r}\ncandidate_param_values |> \n    filter(ll == max(ll))\n\n```\n \n\n## Optimisation algorithms: getting there faster\n\nPreviously, we 'cheated' a bit when using the log likelihood function, fixing the value for one of the parameters $\\sigma^2$ to the value we used when we generated the data, so we could instead look at how the log likelihood surface varied as different combinations of $\\beta_0$ and $\\beta_1$ were plugged into the formula. $\\beta_0$ and $\\beta_1$ values ranging from -5 to 5, and at steps of 0.1, were considered: 101 values of $\\beta_0$, 101 values of $\\beta_1$, and so over 10,000[^5] unique $\\{\\beta_0, \\beta_1\\}$ combinations were stepped through. This approach is known as grid search, and seldom used in practice (except for illustration purposes) because the number of calculations involved can very easily get out of hand. For example, if we were to use it to explore as many distinct values of $\\sigma^2$ as we considered for $\\beta_0$ and $\\beta_1$, the total number of $\\{\\beta_0, \\beta_1, \\sigma^2 \\}$ combinations we would crawl through would be over 100,000 [^6] rather than over 10,000. \n\n\n[^5]: $101^2 = 10201$\n\n[^6]: $101^3 = 1030301$\n\nOne feature we noticed with the likelihood surface over $\\beta_0$ and $\\beta_1$ in the previous post is that it appears to look like a hill, with a clearly defined highest point (the region of maximum likelihood) and descent in all directions from this highest point. Where likelihood surfaces have this feature of being single-peaked in this way (known as 'unimodal'), then a class of algorithms known as 'hill climbing algorithms' can be applied to find the top of such peaks in a way that tends to be both quicker (fewer steps) and more precise than the grid search approach used for illustration in the previous post. \n\n\n## `optim` for parameter point estimation: our Robo-Chauffeur\n\nNote how the `llNormal` function takes a single argument, `pars`, which packages up all the specific candidate parameter values we want to try out. In our previous post, we also had a 'feeder function', `feed_to_ll`, which takes the various $\\beta$ candidate values from the grid and packages them into `pars`. In our previous post, we had to specify the candidate values to try to feed to `llNormal` packages inside `pars`. \n\nBut we don't have to do this. We can instead use an algorithm to take candidate parameters, try them out, then make new candidate parameters and try them out, for us. Much as a taxi driver needs to know where to meet a passenger, but doesn't want the passenger to tell them exactly which route to take, we just need to specify a starting set of values for the parameters to optimise. R's standard way of doing this is with the `optim` function. Here's it in action:\n\n```{r}\n\noptim_results <-  optim(\n    # par contains our initial guesses for the three parameters to estimate\n    par = c(0, 0, 0), \n\n    # by default, most optim algorithms prefer to search for a minima (lowest point) rather than maxima \n    # (highest point). So, I'm making a function to call which simply inverts the log likelihood by multiplying \n    # what it returns by -1\n    fn = function(par, y, X) {-llNormal(par, y, X)}, \n\n    # in addition to the par vector, our function also needs the observed output (y)\n    # and the observed predictors (X). These have to be specified as additional arguments.\n    y = y, X = X\n    )\n\noptim_results\n```\n\nThe `optim` function returns a fairly complex output structure, with the following components:\n\n- `par`: the values for the parameters (in our case $\\{\\beta_0, \\beta_1, \\eta \\}$) which the optimisation algorithm ended up with.\n\n- `value`: the value returned by the function `fn` when the optim routine was stopped. \n\n- `counts`: the number of times the function `fn` was repeatedly called by `optim` before `optim` decided it had had enough\n\n- `convergence`: whether the algorithm used by `optim` completed successfully (i.e. reached what it considers a good set of parameter estimates in `par`), or not. \n\nIn this case, convergence is `0`, which (perhaps counterintuitively) indicates a successful completion. `counts` indicates that optim called the log likelihood function 216 times before stopping, and `par` indicates values of $\\{\\beta_0 = 2.46, \\beta_1 = 1.38, \\eta = -1.34\\}$ were arrived at. As $\\sigma^2 = e^\\eta$, this means $\\theta = \\{\\beta_0 = 2.46, \\beta_1 = 1.38, \\sigma^2 = 0.26 \\}$. As a reminder, the 'true' values are $\\{\\beta_0 = 2.50, \\beta_1 = 1.40, \\sigma^2 = 0.25\\}$. \n\nSo, the `optim` algorithm has arrived at pretty much the correct answers for all three parameters, in 216 calls to the log likelihood function, whereas for the grid search approach in the last post we made over 10,000 calls to the log likelihood function for just *two* of the three parameters. \n\nLet's see if we can get more information on exactly what kind of path `optim` took to get to this set of parameter estimates. We should be able to do this by specifying a value in the `trace` component in the `control` argument slot...\n\n\n### Comparisons with 'canned' functions\n\nFor comparison let's see what `lm` and `glm` produce. \n\nFirst `lm`:\n\n```{r}\ntoy_df <- tibble(\n    x = x, \n    y = y\n)\n\n\nmod_lm <- lm(y ~ x, data = toy_df)\nsummary(mod_lm)\n```\n\n$\\{\\beta_0 = 2.46, \\beta_1 = 1.38\\}$, i.e. the same to 2 decimal places. \n\nAnd now with `glm`:\n\n```{r}\nmod_glm <- glm(y ~ x, data = toy_df, family = gaussian(link = \"identity\"))\n\nsummary(mod_glm)\n```\n\nOnce again, $\\{\\beta_0 = 2.46, \\beta_1 = 1.38\\}$\n\n\n### Discussion\n\nIn the above, we've successfully used `optim`, our Robo-Chauffeur, to arrive very quickly at some good estimates for our parameters of interest, $\\beta_0$ and $\\beta_1$, which are in effect identical to those produced by the `lm` and `glm` functions. \n\nThis isn't a coincidence. What we've done the hard way is what the `glm` function (in particular) largely does 'under the hood'.\n\n\n## `optim`al uncertainty\n\nWhen using `optim()` above, we managed to get it to return a set of parameter values for our model that it thought was 'best', i.e. minimised the loss function specified by the log likelihood. These are known as **point estimates**, and are effectively the coefficients presented by `lm` or `glm` or equivalent statistical functions and packages. However `optim()` just returned these point estimates, without any indication of how uncertain we should be about these point estimates. A standard statistical model summary will tend to also report measures of uncertainty around the point estimates, in the form of standard errors. When these are implicitly combined with a Null hypothesis, namely that the 'true' value of a parameter may be zero, the point estimate together with its standard error allows the calculation of z values and p values.\n\nHow can we use `optim()` to return measures of uncertainty, which will allow the standard errors to be estimated as well as the point values?\n\nWe'll start with a weird analogy to get an intuition for how this can be done with `optim()`.\n\n### Barefoot and Blind: A weird analogy for a complicated idea \n\nImagine optim, your hill-finding robo-chauffeur, has taken you to the top of a likelihood surface. Then it leaves you there...\n\n... and you're blind, and have no shoes. (You also have an uncanny sense of your orientation, whether north-south, east-west, or some other angle.)\n\nSo, you know you're at the top of the hill, but you can't see what the landscape around you looks like. However, you still want to get a sense of this landscape, and how it varies around the spot you're standing on. \n\nWhat do you do? \n\n\nIf you're playing along with this weird thought experiment, one approach would be to use your feet as depth sensors. You make sure you never stray from where you started, and to always keep one foot planted on this initial spot (which you understand to be the highest point on the landscape). Then you use your other foot to work out how much further down the surface is from the highest point as you venture away from the highest point in different directions.\n\nSay you keep your left foot planted on the highest point, and make sure your right foot is always positioned (say) 10 cm horizontally from your left foot. Initially your two feet are arranged east-west; let's call this 0 degrees. When you put your right foot down, you notice it needs to travel 2 cm further down to reach terra ferma relative to your left foot. \n\n2cm at 0 degrees. You'll remember that. \n\nNow you rotate yourself 45 degrees, and repeat the same right foot drop. This time it needs to travel 3cm down relative to your left foot. \n\n3cm at 45 degrees. You remember that too. \n\nNow you rotate another 45 degrees, north-south orientation, place your right foot down; now it falls 5cm down relative to your left foot. \n\n2cm at 0 degrees; 3cm at 45 degrees; 5cm at 90 degrees. \n\nNow with this information, you try to construct the landscape you're on top of with your mind's eye, making the assumption that the way it has to have curved from the peak you're on to lead to the drops you've observed is consistent all around you; i.e. that there's only one hill, you're on top of it, and it's smoothly curved in all directions. \n\n\n### Information and uncertainty \n\nIf you could further entertain the idea that your feet are infinitely small, and the gap between feet is also infinitely small (rather than the 10cm above), then you have the intuition behind this scary-looking but very important formula from @King98 (p. 89):\n\n\n$$\n\\widehat{V(\\hat{\\theta})} = - \\frac{1}{n}[\\frac{\\delta^2lnL(\\tilde{\\theta}|y)}{\\delta \\tilde{\\theta} \\delta \\tilde{\\theta}^{'}}]^{-1}_{\\tilde{\\theta} = \\hat{\\theta}}\n$$\n\nWhat this is saying, in something closer to humanese, is something like:\n\n> Our best estimate of the amount of uncertainty we have in our estimates is a function of how much the likelihood surface curves at the highest point on the surface. (It also gets less uncertain, the more observations we have).\n\n\n\nAmongst the various bells, whistles and decals in the previous formula is the superscript $(.)^{-1}$. This means *invert*, which for a single value means $\\frac{1}{.}$ but for a matrix means something conceptually the same but technically not. \n\nAnd what's being *inverted* in the last formula? A horrible-looking expression, $[\\frac{\\delta^2lnL(\\tilde{\\theta}|y)}{\\delta \\tilde{\\theta} \\delta \\tilde{\\theta}^{'}}]_{\\tilde{\\theta} = \\hat{\\theta}}$, that's basically an answer to the question of *how curvy is the log likelihood surface at its peak position?* \n\nWithin @King98 (p.89, eq. 4.18), this expression (or rather the negative of the term) is defined as $I(\\hat{\\theta} | y)$, where $I(.)$ stands for **information**. \n\nSo, the algebra are saying\n\n> Uncertainty is inversely related to information\n\nOr perhaps even more intuitively\n\n> The more information we have, the less uncertain we are\n\nOf course this makes sense. If you ask someone \"How long will this task take?\", and they say \"Between one hour and one month\", they likely have less information about how long the task will actually than if they had said \"Between two and a half and three hours\". More generally:\n\n- **Shallow gradients** mean **wide uncertainty intervals** mean **low information**\n- **Sharp gradients** mean **narrow uncertaintly intervals** mean **high information**\n\n\nThis is, fundamentally, what the blind and barefoot person in the previous analogy is trying to achieve: by feeling out the local curvature around the highest point, they are trying to work out how much information they have about different pieces of the model. The curvature along any one dimension of the surface (equivalent to the 0 and 90 degree explorations) indicates how much information there is about any single coefficient, and the curvature along the equivalent of a 45 degree plane gives a measure of how associated any two coefficients tend to be. \n\n\nWith these many analogies and equations spinning in our heads, let's now see how these concepts can be applied in practice.\n\n### How to get `optim()` to return this information\n\nHaving reminded myself of the particular options for `optim` that are typically used to report parameter uncertainty, let's run the follows:\n\n\n```{r}\nfuller_optim_output <- optim(\n    par = c(0, 0, 0), \n    fn = llNormal,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\n\n```\n\nWe have used a slightly different algorithm ('BFGS'), and a different way of specifying the function to search over (using `fnscale = -1` to invert the likelihood), but we have the same `par` estimates as before: $\\beta = \\{\\beta_0 = 2.46, \\beta_1 = 1.38\\}$. So the changes we've made to the `optim` arguments haven't changed what it estimates. \n\nOne new argument we've set in `optim` is `hessian = TRUE`. [Hessian](https://en.wikipedia.org/wiki/Hessian_fabric) is a kind of coarse fabric made from vegetable waste, typically woven in a criss-crossing, grid-like pattern. Hessian matrices are matrices of second derivatives, as described in [the wikipedia article](https://en.wikipedia.org/wiki/Hessian_matrix). [^7] If you can bear to recall the really complex expression above, for calculating the curvature around a point on a surface, you'll recall it's also about second derivatives. \n\nNone of this is a coincidence. The `hessian` component of the optim output above contains what we need. \n\n[^7]: Though I had assumed Hessian matrices are called Hessian matrices because they sort-of resemble the criss-crossing grids of Hessian bags, they're actually named after [Otto Hesse](https://en.wikipedia.org/wiki/Otto_Hesse), who proposed them.\n\n```{r}\nhess <- fuller_optim_output$hessian\nhess\n```\n\nYou might notice that the Hessian matrix is square, with as many columns as rows. And, that the number of columns (or rows) is equal to the number of parameters we have estimated, i.e. three in this case. \n\nYou might also notice that the values are symmetrical about the diagonal running from the top left to the bottom right. \n\nAgain, this is no accident. \n\n\nRemember that variation is inversely related to information, and that $(.)^{-1}$ is the inversion operator on $I(.)$, the Information Matrix. Well, this Hessian *is* (pretty much) $I(.)$. So let's see what happens when we invert it (using the `solve` operator):\n\n```{r}\ninv_hess <- solve(-hess)\ninv_hess\n```\n\nAs with `hess`, `inv_hess` is symmetric around the top-left to bottom-right diagonal. For example, the value on row 2 and column 1 is the same as on row 1, column 2. \n\nWe're mainly interested in the first two columns and rows, as these contain the values most comparable with the glm summary reports \n\n```{r}\ninv_hess_betas <- inv_hess[1:2, 1:2]\n\ninv_hess_betas\n```\n\nWhat the elements of the above matrix provide are estimates of the *variances* of a single parameter $\\beta_j$, and/or the *covariances* between any two parameters $\\{\\beta_0, \\beta_1\\}$. In this example:\n\n$$\n\\begin{bmatrix}\nvar(\\beta_0) & cov(\\beta_0, \\beta_1) \\\\\ncov(\\beta_1, \\beta_0) & var(\\beta_1)\n\\end{bmatrix}\n$$\n\nIt's because the on-diagonal terms are variances of uncertaintly for a single term, that it can be useful to take the square root of these terms to get estimates of the standard errors:\n\n```{r}\nsqrt(diag(inv_hess_betas))\n```\n\nCompare with the `Std Err` term in the following:\n\n```{r}\nsummary(mod_glm)\n\n```\n\nThe estimates from the Hessian in optim, of $\\{0.18, 0.07\\}$, are not exactly the same as the $\\{0.21, 0.08\\}$ reported for `mod_glm`; the methods employed are not identical. But they are hopefully similar enough to demonstrate they provide similar information about similar quantities of uncertainty. \n\nBack in part five, we used this same dataset to show how the log likelihood varies for various, equally spaced, candidate values for $\\beta_0$ and $\\beta_1$ (having fixed $\\eta = \\exp({\\sigma^2})$ at its true value). This led to the followng map of the landscape[^8]\n\n```{r}\nlibrary(tidyverse)\ncandidate_param_values <- expand_grid(\n    beta_0 = seq(-15, 15, by = 0.05),\n    beta_1 = seq(-15, 15, by = 0.05)\n)\n\nfeed_to_ll <- function(b0, b1){\n    pars <- c(b0, b1, log(0.25))\n    llNormal(pars, y, X)\n}\n\ncandidate_param_values <- candidate_param_values |>\n    mutate(\n        ll = map2_dbl(beta_0, beta_1, feed_to_ll)\n    )\n\ncandidate_param_values |>\n    ggplot(aes(beta_0, beta_1, z = ll)) + \n    geom_contour_filled() + \n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) +\n    labs(\n        title = \"Log likelihood as a function of possible values of beta_0 and beta_1\",\n        x = \"beta0 (the intercept)\",\n        y = \"beta1 (the slope)\"\n    )\n```\n\n[^8]: I've narrowed the space between values slightly, and increased the range of permutations of values to search through, for an even more precise recovery of the likelihood landscape. \n\nWithin the above we can see that the log likelihood landscape for these two parameters looks like a bivariate normal distribution, we can also see a bit of a slant in this normal distribution. This implies a *correlation* between the two candidate values. The direction of the slant is downwards from left to right, implying the correlation is negative. \n\nFirstly let's check that the correlation between $\\beta_0$ and $\\beta_1$ implied by the Hessian *is* negative. These are the off-diagonal elements, either first row, second column, or second row, first column:\n\n```{r}\ninv_hess_betas[1,2]\ninv_hess_betas[2,1]\n```\n\nYes they are!\n\n\nAs mentioned previously, the likelihood surface produced by the gridsearch method involves a lot of computations, so a lot of steps, and likely a lot of trial and error, if it were to be used to try to find the maximum likelihood value for the parameters. By contrast, the `optim()` algorithm typically involves far fewer steps, 'feeling' its way up the hill until it reaches a point where there's nowhere higher. [^9] When it then reaches this highest point, it then 'feels' the curvature around this point in multiple directions, producing the Hessian. The algorithm doesn't *see* the likelihood surface, because it hasn't travelled along most of it. But the Hessian can be used to *infer* the likelihood surface, subject to subject (usually) reasonable assumptions.\n\n[^9]: In practice, the algorithm seeks to minimise the value returned by the function, not maximise it, hence the negative being applied through the argument `fnscale = -1` in the `control` argument. But the principle is identical. \n\nWhat are these (usually) reasonable assumptions? Well, that the likelihood surface can be approximated by a multivariate normal distribution, which is a generalisation of the standard Normal distribution over more than one dimensions.[^10]\n\n[^10]: This means that, whereas the standard Normal returns a single output, the Multivariate Normal returns a vector of outputs, one for each parameter in $\\theta$, which should also be the length of the diagonal (or alternatively either the number of rows or columns) of $\\Sigma$. \n\nWe can use the `mvrnorm` function from the `MASS` package, alongside the point estimates and Hessian from `optim`, in order to produce estimates of $\\theta = \\{ \\beta_0, \\beta_1, \\eta \\}$ which represent reasonable uncertainty about the true values of each of these parameters. Algebraically, this can be expressed as something like the following:\n\n$$\n\\tilde{\\theta} \\sim Multivariate Normal(\\mu = \\dot{\\theta}, \\sigma^2 = \\Sigma)\n$$\n\nWhere $\\dot{\\theta}$ are the point estimates from `optim()` and $\\Sigma$ is the implied variance-covariance matrix recovered from the Hessian. \n\nLet's create this MVN model and see what kinds of outputs it produces. \n\n\n```{r}\nlibrary(MASS)\n\npoint_estimates <- fuller_optim_output$par\n\nvcov <- -solve(fuller_optim_output$hessian)\nparam_draws <- MASS::mvrnorm(\n    n = 10000, \n    mu = point_estimates, \n    Sigma = vcov\n)\n\ncolnames(param_draws) <- c(\n    \"beta0\", \"beta1\", \"eta\"\n)\n\nhead(param_draws)\n```\n\nWe can see that `mvrnorm()`, with these inputs from `optim()` produces three columns: one for each parameter being estimated $\\{ \\beta_0, \\beta_1, \\eta \\}$. The `n` argumment indicates the number of draws to take; in this case, 10000. This number of draws makes it easier to see how much variation there is in each of the estimates. \n\n```{r}\ndf_param_draws <- \nparam_draws |>\n    as_tibble(\n        rownames = 'draw'\n    ) |>\n    mutate(\n        sig2 = exp(eta)\n    ) |>\n    pivot_longer(\n        -draw, \n        names_to = \"param\",\n        values_to = \"value\"\n    ) \n    \ndf_param_draws |>\n    ggplot(aes(x = value)) + \n    geom_density() + \n    facet_grid(param ~ .) + \n    geom_vline(xintercept=0)\n\n```\n\nThere are a number of things to note here: firstly, that the average of the $\\beta_0$ and $\\beta_1$ values appear close to their known 'true' values of 2.5 and 1.4 respectively. Secondly, that whereas the $\\eta$ values are normally distributed, the $\\sigma^2$ values derived from them are not, and are never below zero; this is the effect of the exponential link between quantities. Thirdly, that the implied values of $\\sigma^2$ do appear to be centred around `0.25`, as they should be as $\\sigma$ was set to `0.50` in the model. \n\nAnd forthly, that the density around $\\beta_1$ is more peaked than around $\\beta_0$. This concords with what we saw previously in the filled contour map: both the horizontal `beta0` axis and vertical `beta1` axis are on the same scale, but the oval is broader along the horizontal axis than the vertical axis. This in effect implies that we have more information about the true value of $\\beta_1$, the slope, than about the true value of $\\beta_0$, the intercept. \n\nWe can also use these draws to reproduce something similar to, but not identical to, [^11] the previous filled contour map:\n\n```{r}\n# param_draws |>\n#     as_tibble(\n#         rownames = 'draw'\n#     ) |>\n#     ggplot(aes(x = beta0, y = beta1)) + \n#     geom_point(alpha = 0.1) + \n#     coord_cartesian(xlim = c(-10, 10), ylim = c(-10, 10))\n\nparam_draws |>\n    as_tibble(\n        rownames = 'draw'\n    ) |>\n    ggplot(aes(x = beta0, y = beta1)) + \n    geom_density_2d_filled() + \n    coord_equal()\n\n```\n\n[^11]: The values will not be identical because the values for $\\eta$, and so $\\sigma^2$, have not been fixed at the true value in this example. \n\nOnce again, we see the same qualities as the contour map produced by interrogating the likelihood surface exhaustively: the distribution appears bivariate normal; there is a greater range in the distribution along the `beta0` than the `beta1` axis; and there is evidence of some negative correlation between the two parameters.\n\n### Summary\n\nThis post has shown how `optim()`, which in its vanilla state only returns point estimates, can be configured to also calculater and report the Hessian, a record of instantaneous curvature around the point estimates. Even without a fine-grained and exhausive search throughout the likelihood surface, this measure of curvature can be used to produce similar measures of uncertainty to the more exhausive approach, in a fraction of the number of computations. \n\nMore importantly, it can be used to generate draws of plausible combinations of parameter values, something denoted as $\\tilde{\\theta}$ earlier. This is something especially useful for producing *honest quantities of interest*, which both tell users of models something they want to know, while also representing how uncertain we are in this knowledge. \n\n## Quantities of interest\n\nWe'll now, finally, show how this knowledge can be applied to do something with statistical models that ought to be done far more often: report on what @KinTomWit00 calls **quantities of interest**, including *predicted values*, *expected values*, and *first differences*. Quantities of interest *are not* the direction and statistical significance (P-values) that many users of statistical models convince themselves matter, leading to the kind of mindless stargazing summaries of model outputs [described in section one](../intro-to-glms/index.qmd). Instead, they're the kind of questions that someone, *not trained to think that stargazing is satisfactory*, might reasonably want answers to. These might include: \n\n- What is the expected income of someone who completes course X in the five years after graduation? (*Expected values*)\n- What is the expected range of incomes of someone who completes course X in the five years after graduation? (*Predicted values*)\n- What is the expected difference in incomes between someone who completes course X, compared to course Y, in the five years after graduation? (*First Differences*)\n\nIn [section one](../intro-to-glms/index.qmd), we showed how to answer some of the questions of this form, for both standard linear regression and logistic regression. We showed that for linear regression such answers tend to come directly from the summary of coefficients, but that for logistic regression such answers tend to be both more ambiguous and dependent on other factors (such as gender of graduate, degree, ethnicity, age and so on), and require more processing in order to produce estimates for. \n\nHowever, we previously produced only *point estimates* for these questions, and so in a sense misled the questioner with the apparent certainty of our estimates. We now know, from earlier in this section, that we can use information about parameter uncertainty to produce parameter estimates $\\tilde{\\theta}$ that *do* convey parameter uncertainty, and so we can do better than the point estimates alone to answer such questions in way that takes into account such uncertainty, with a range of values rather than a single value. \n\n### Method \n\nLet's make use of our toy dataset one last time, and go through the motions to produce the $\\tilde{\\theta}$ draws we ended with on the last post:\n\n```{r}\nllNormal <- function(pars, y, X){\n    beta <- pars[1:ncol(X)]\n    sigma2 <- exp(pars[ncol(X)+1])\n    -1/2 * (sum(log(sigma2) + (y - (X%*%beta))^2 / sigma2))\n}\n```\n\n```{r}\n# set a seed so runs are identical\nset.seed(7)\n# create a main predictor variable vector: -3 to 5 in increments of 1\nx <- (-3):5\n# Record the number of observations in x\nN <- length(x)\n# Create a response variable with variability\ny <- 2.5 + 1.4 * x  + rnorm(N, mean = 0, sd = 0.5)\n\n# bind x into a two column matrix whose first column is a vector of 1s (for the intercept)\n\nX <- cbind(rep(1, N), x)\n# Clean up names\ncolnames(X) <- NULL\n\n```\n\n\n```{r}\n\nfuller_optim_output <- optim(\n    par = c(0, 0, 0), \n    fn = llNormal,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\nhess <- fuller_optim_output$hessian\ninv_hess <- solve(-hess)\ninv_hess\n\n```\n\n\n```{r}\npoint_estimates <- fuller_optim_output$par\n\nvcov <- -solve(fuller_optim_output$hessian)\nparam_draws <- MASS::mvrnorm(\n    n = 10000, \n    mu = point_estimates, \n    Sigma = vcov\n)\n\ncolnames(param_draws) <- c(\n    \"beta0\", \"beta1\", \"eta\"\n)\n\n```\n\nLet's now look at our toy data again, and decide on some specific questions to answer:\n\n```{r}\nlibrary(tidyverse)\ntoy_df <- tibble(x = x, y = y)\n\ntoy_df |> \n    ggplot(aes(x = x, y = y)) + \n    geom_point() \n\n\n```\n\nWithin the data itself, we have only supplied x and y values for whole numbers of x between -3 and 5. But we can use the model to produce estimates for non-integer values of x. Let's try 2.5. For this single value of x, we can produce both *predicted values* and *expected values*, by passing the same value of x to each of the plausible estimates of $\\theta$ returned by the multivariate normal function above. \n\n```{r}\ncandidate_x <- 2.5\n```\n\n\n### Expected values \n\nHere's an example of estimating the expected value of y for x = 2.5 using loops and standard algebra:\n\n```{r}\n# Using standard algebra and loops\nN <- nrow(param_draws)\nexpected_y_simpler <- vector(\"numeric\", N)\nfor (i in 1:N){\n    expected_y_simpler[i] <- param_draws[i, \"beta0\"] + candidate_x * param_draws[i, \"beta1\"]\n}\n\nhead(expected_y_simpler)\n\n```\n\nWe can see just from the first few values that each estimate is slightly different. Let's order the values from lowest to highest, and find the range where 95% of values sit:\n\n```{r}\nev_range <- quantile(expected_y_simpler,  probs = c(0.025, 0.500, 0.975)) \n\nev_range\n```\n\nThe 95% interval is therefore between `5.51` and `6.29`, with the median (similar but not quite the point estimate) being `5.90`. Let's plot this against the data: \n\n```{r}\n\ntoy_df |> \n    ggplot(aes(x = x, y = y)) + \n    geom_point() + \n    annotate(\"point\", x = candidate_x, y =  median(expected_y_simpler), size = 1.2, shape = 2, colour = \"blue\") + \n    annotate(\"segment\", x = candidate_x, xend=candidate_x, y = ev_range[1], yend = ev_range[3], colour = \"blue\")\n\n```\n\nThe vertical blue line therefore shows the range of estimates for $Y|x=2.5$ that contain 95% of the expected values given the draws of $\\beta = \\{\\beta_0, \\beta_1\\}$ which we produced from the Multivariate Normal given the point estimates and Hessian from `optim()`. This is our estimated range for the *expected value*, not *predicted value*. What's the difference? \n\n### Predicted values\n\nOne clue about the difference between expected value lies in the parameters from `optim()` we did and did not use: Whereas we have both point estimates and uncertainty estimates for the parameters $\\{\\beta_0, \\beta_1, \\sigma^2\\}$,[^12] we only made use of the the two $\\beta$ parameters when producing this estimate. \n\n[^12]:Where $\\sigma^2$ is from $\\eta$ and we defined $e^{\\eta} = \\sigma^2$, a transformation which allowed `optim()` to search over an unbounded rather than bounded real number line\n\nNow let's recall the general model formula, from the start of @KinTomWit00, which we repeated for the first few posts in the series:\n\n**Stochastic Component**\n\n$$\nY_i \\sim f(\\theta_i, \\alpha)\n$$\n\n**Systematic Component**\n\n$$\n\\theta_i = g(X_i, \\beta)\n$$\n\n\nThe manual for Zelig, the (now defunct) R package that used to support analysis using this approach, states that for Normal Linear Regression [these two components are resolved as follows](https://docs.zeligproject.org/articles/zelig_normal.html#model):\n\n**Stochastic Component**\n\n$$\nY_i \\sim Normal(\\mu_i, \\sigma^2)\n$$\n\n**Systematic Component**\n\n$$\n\\mu_i = x_i \\beta\n$$\n\nThe page then goes onto state that the *expected value*, $E(Y)$, is :\n\n$$\nE(Y) = \\mu_i = x_i \\beta\n$$\n\nSo, in this case, the expected value is the systematic component only, and does not involve the dispersion parameter in the stochastic component, which for normal linear regression is the $\\sigma^2$ term. That's why we didn't use estimates of $\\sigma^2$ when simulating the expected values. \n\nBut why is this? Well, it comes from the expectation operator, $E(.)$. This operator means something like, *return to me the value that would be expected if this experiment were performed an infinite number of times*. \n\nThere are two types of uncertainty which give rise to variation in the predicted estimate: *sampling uncertainty*, and *stochastic variation*. In the expected value condition, this second source of variation falls to zero,[^13] leaving only the influence of sampling uncertainty, as in uncertainty about the true value of the $\\beta$ parameters, remaining on uncertainty on the predicted outputs. \n\n[^13]: It can be easier to see this by using the more conventional way of expressing Normal linear regression: $Y_i = x_i \\beta + \\epsilon$, where $\\epsilon \\sim Normal(0, \\sigma^2)$. The expectation is therefore $E(Y_i) = E( x_i \\beta + \\epsilon ) = E(x_i \\beta) + E(\\epsilon)$. For the first part of this equation, $E(x_i \\beta) = x_i \\beta$, because the systematic component is always the same value, no matter how many times a draw is taken from the model. And for the second part, $E(\\epsilon) = 0$, because Normal distributions are symmetrical around their central value over the long term: on average, every large positive value drawn from this distribution will become cancelled out by an equally large negative value, meaning the expected value returned by the distribution is zero. Hence, $E(Y) = x_i \\beta$.\n\nFor *predicted values*, we therefore need to reintroduce *stochastic variation* as a source of variation in the range of estimates produced. Each $\\eta$ value we have implies a different $\\sigma^2$ value in the stochastic part of the equation, which we can then add onto the variation caused by parameter uncertainty alone: \n\n```{r}\nN <- nrow(param_draws)\npredicted_y_simpler <- vector(\"numeric\", N)\nfor (i in 1:N){\n    predicted_y_simpler[i] <- param_draws[i, \"beta0\"] + candidate_x * param_draws[i, \"beta1\"] + \n        rnorm(\n            1, mean = 0, \n            sd = sqrt(exp(param_draws[i, \"eta\"]))\n        )\n}\n\nhead(predicted_y_simpler)\n\n\n```\n\nLet's now get the 95% prediction interval for the predicted values, and compare them with the expected values predicted interval earlier\n\n```{r}\npv_range <- \n    quantile(\n        predicted_y_simpler, \n        probs = c(0.025, 0.500, 0.975)\n    )\n\npv_range\n```\n\nSo, whereas the median is similar to before, `5.90`, the 95% interval is now from `4.77` to `7.06`[^14]. This compares with the `5.51` to `6.29` range for the expected values. Let's now plot this predicted value range just as we did with the expected values:\n\n[^14]: Because these estimates depend on random variation, these intervals may be slightly different to two decimal places than the values I'm quoting here.\n\n```{r}\ntoy_df |> \n    ggplot(aes(x = x, y = y)) + \n    geom_point() + \n    annotate(\"point\", x = candidate_x, y =  pv_range[2], size = 1.2, shape = 2, colour = \"blue\") + \n    annotate(\"segment\", x = candidate_x, xend=candidate_x, y = pv_range[1], yend = pv_range[3], colour = \"red\")\n\n```\n\nClearly considerably wider. \n\n\n## Log likelihood for logistic regression \n\nPreviously we derived the log likelihood for Normal (Gaussian) regression and did some cool things with it. Let's now do the same with logistic regression. We need to start with definition, then calculate log likelihood, then write it as a function in R that `optim()` can work its magic with. \n\n\nAccording to [the relevant section of the Zelig website](https://docs.zeligproject.org/articles/zelig_logit.html#model-definition):\n\n**Stochastic component**\n$$\nY_i \\sim Bernoulli(y_i | \\pi_i )\n$$\n\n$$\nY_i = \\pi_i^{y_i}(1 - \\pi_i)^{1-y_i}\n$$\n\nwhere $\\pi_i = P(Y_i = 1)$\n\nAnd \n\n**Systematic Component**\n\n$$\n\\pi_i = \\frac{1}{1 + \\exp{(-x_i \\beta)}}\n$$\n\nThe likelihood is the product of the above for all observations in the dataset $i \\in N$\n\n$$\nL(.) = \\prod{\\pi_i^{y_i}(1 - \\pi_i)^{1-y_i}}\n$$\n\nThe effect of logging the above[^15]:\n\n$$\n\\log{L(.)} = \\sum{[y_i \\log{\\pi_i} + (1-y_i)\\log{(1-y_i)}]}\n$$\n\nThis can now be implemented as a function: \n\n```{r}\nllogit <- function(par, y, X){\n    xform <- function(z) {1 / (1 + exp(-z))}\n    p <- xform(X%*%par)\n    sum(y * log(p) + (1-y) * log(1 - p))\n}\n\n```\n\nLet's pick an appropriate dataset. How about... picking a [Palmer Penguin](https://allisonhorst.github.io/palmerpenguins/)!?\n\n```{r}\nlibrary(tidyverse)\npalmerpenguins::penguins\n\n```\n\nLet's say we want to predict whether a penguin is of the Chinstrap species\n\n```{r}\npalmerpenguins::penguins %>%\n    filter(complete.cases(.)) |>\n    mutate(is_chinstrap = species == \"Chinstrap\") |>\n    ggplot(aes(x = bill_length_mm, y = bill_depth_mm, colour = is_chinstrap, shape = sex)) + \n    geom_point()\n\n```\n\nNeither bill length nor bill depth alone appears to distinguish between chinstrap and other species. But perhaps the interaction (product) of the two terms would do:\n\n```{r}\npalmerpenguins::penguins %>%\n    filter(complete.cases(.)) |>\n    mutate(is_chinstrap = species == \"Chinstrap\") |>\n    mutate(bill_size = bill_length_mm * bill_depth_mm) |>\n    ggplot(aes(x = bill_size, fill = is_chinstrap)) + \n    facet_wrap(~sex) + \n    geom_histogram()\n\n```\n\nThe interaction term isn't great at separating the two classes, but seems to be better than either length or size alone. So I'll include it in the model. \n\n```{r}\ndf <- palmerpenguins::penguins %>%\n    filter(complete.cases(.)) |>\n    mutate(is_chinstrap = species == \"Chinstrap\") |>\n    mutate(bill_size = bill_length_mm * bill_depth_mm) |>\n    mutate(is_male = as.numeric(sex == \"male\"))\n\ny <- df$is_chinstrap\n\nX <- cbind(1, df[,c(\"bill_length_mm\", \"bill_depth_mm\", \"bill_size\", \"is_male\")]) |>\nas.matrix()\n\n```\n\nSo, including the intercept term, our predictor matrix $X$ contains 5 columns, including the interaction term `bill_size`. [^16]\n\nLet's try now to use the above in `optim()`\n\n```{r}\nfuller_optim_output <- optim(\n    par = rep(0, 5), \n    fn = llogit,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\nhess <- fuller_optim_output$hessian\ninv_hess <- solve(-hess)\ninv_hess\n\n```\n\nNow let's compare with `glm()`\n\n```{r}\nmod_glm <- glm(is_chinstrap ~ bill_length_mm * bill_depth_mm +is_male, data = df, \nfamily = binomial())\nsummary(mod_glm)\n```\n\nUh oh! On this occasion it appears one or both approaches have become confused. A five dimensional search space might be too much for the algorithms to cope with, especially with collinearity [^17] between some of the terms. Let's simplify the task a bit, and just use intercept, bill size, and is_male as covariates. First with the standard package:\n\n```{r}\nmod_glm_simpler <- glm(is_chinstrap ~ bill_size +is_male,   data = df, \nfamily = binomial())\nsummary(mod_glm_simpler)\n\n```\n\nAnd now with the bespoke function and optim\n\n```{r}\nX <- cbind(1, df[,c(\"bill_size\", \"is_male\")]) |>\nas.matrix()\n\nfuller_optim_output <- optim(\n    par = rep(0, 3), \n    fn = llogit,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\nhess <- fuller_optim_output$hessian\ninv_hess <- solve(-hess)\ninv_hess\n\n```\n\nThe estimates from the two approaches are now much closer, even if they aren't as close to each other as in the earlier examples. Using `optim()`, we have parameter estimates $\\beta = \\{\\beta_0 = -32.60, \\beta_1 = 0.04, \\beta_2 = -6.99\\}$, and using `glm()`, we have estimates $\\beta = \\{\\beta_0 = -32.82, \\beta_1 = 0.04, \\beta_2 = -7.04 \\}$ \n\nIf we cheat a bit, and give the five dimensional version starting values closer to the estimates from `glm()`, we can probably get similar estimates too. \n\n```{r}\nX <- cbind(1, df[,c(\"bill_length_mm\", \"bill_depth_mm\", \"bill_size\", \"is_male\")]) |>\nas.matrix()\n\nfuller_optim_output <- optim(\n    par = c(300, -10, -29, 0.5, -10), \n    fn = llogit,\n    method = \"BFGS\",\n    control = list(fnscale = -1),\n    hessian = TRUE,\n    y = y, \n    X = X\n)\n\nfuller_optim_output\nhess <- fuller_optim_output$hessian\ninv_hess <- solve(-hess)\ninv_hess\n\n\n\n```\n\nWell, they are *closer*, but they aren't *very close*. As mentioned, the `glm()` model produced warnings, and some of the variables are likely to be collinear, so this initial specification may have been especially difficult to fit. Both approaches found an answer, but neither seem happy about it! \n\n\n### Summary\n\nIn the exercise above we did for logistic regression what the previous few posts in section two did for standard regression: i.e. we derived the log likelihood, applied it using optim, and compared with results from the `glm()` package. We saw in this case that fitting models isn't always straightforward. We were - well, I was - overly ambitious in building and applying an overly parameterised model specification. But we eventually got to similar parameter values using both approaches. \n\nThough this wasn't as straightforward as I was hoping for, I'm presenting it warts-and-all. In principle, the log-likelihood maximisation approach generalises to a great many model specifications, even if in practice some model structures aren't as straightforward to fit as others. \n\n\n\n[^15]: Thanks to [this post](https://arunaddagatla.medium.com/maximum-likelihood-estimation-in-logistic-regression-f86ff1627b67). My calculus is a bit rusty these days.\n\n[^16]: An important point to note is that, though bill_size is derived from other variables, it's its own variable, and so has another distinct 'slot' in the vector of $\\beta$ parameters. It's just another dimension in the search space for optim to search through. \n\n[^17]: This is fancy-speak for when two terms aren't independent, or both adding unique information. For example, length in mm, length in cm, and length in inches would all be perfectly collinear, so shouldn't all be included in the model. "},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Likelihood and Simulation Theory","message":false,"bibliography":["references.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}