{"title":"Resampling for post-stratification","markdown":{"yaml":{"title":"Resampling for post-stratification","author":"Jon Minton","date":"2024-07-23","resampling-order":5,"categories":["statistics","r","hypothesis tests","resampling","bootstrapping","post-stratification","hacker stats"],"code-fold":true,"warning":false,"message":false},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nIn [the introductionary post](../resampling-approaches-intro/index.qmd) in this series on Hacker Stats, I mentioned that resampling methods can be used to perform post-stratification, meaning reweighting of observations from a sample in such a way as to make them more representative of the population of interest to us. Let's look at this using a  variation of the [red coin/blue coin](../permutation-with-base-r/index.qmd) example from a couple of posts ago.\n\n## Red Coin/Blue Coin\n\nImagine we have a **population** of two types of coin:\n\n-   **Red Coins**, which come up heads 65% of the time\n-   **Blue Coins**, which come up heads 47% of the time\n\nWithin our *population*, we know 75% of the coins are **Blue coins**, and 25 of the coins are **Red Coins**.\n\nHowever, our sample contains 20 red coins, and 20 blue coins. i.e. the distribution of coin types in our sample is different to that in our population.\n\nLet's first create this sample dataset:\n\n```{r}\n\nlibrary(tidyverse)\n\nset.seed(9)\n\ndraws_red <- rbinom(n=20, size = 1, prob = 0.65)\ndraws_blue <- rbinom(n=20, size = 1, prob = 0.47)\n\ncoin_colour <- c(\n    rep(\"red\", 20),\n    rep(\"blue\", 20)\n)\n\nreal_sample_data <- data.frame(\n    coin_colour = coin_colour, \n    outcome = c(draws_red, draws_blue)\n)\n\nrm(draws_red, draws_blue, coin_colour)\n\nhead(real_sample_data)\n```\n\nWhat's the expected probability of heads in the sample?\n\n```{r}\nmean(real_sample_data$outcome)\n\nreal_sample_data |>\n    group_by(coin_colour) |>\n    summarise(prop = mean(outcome))\n```\n\nOverall, 65% of the sample - 20 reds, 20 blues - are heads. The proportion of blues is 50%, and of reds is 80%. So, it so happens that, with this random number seed, the proportions in the sample of both reds and blues are higher than the theoretical average (the `prob` value arguments in the code above).\n\nLet's now try to use bootstrapping to calculate a distribution around the sample mean:\n\n```{r}\nbootstrap_means <- function(x, nReps = 10000){\n    out <- vector(\"numeric\", nReps) \n\n    for (i in 1:nReps){\n        this_resample <- sample(\n            x=x, \n            size = length(x), \n            replace = TRUE # This is what makes it bootstrapping\n        )\n        out[i] <- mean(this_resample)\n    }\n    out\n}\n\nbootstrapped_means <- bootstrap_means(real_sample_data$outcome)\n\nhead(bootstrapped_means)\n```\n\nWhat does this look like as a histogram?\n\n```{r}\ntibble(value = bootstrapped_means) |>\n    ggplot(aes(x = value)) + \n    geom_histogram(bins = 50)\n\n```\n\nWe can see the familiar bell-shaped distribution of values here. What about for blues and reds separately?\n\n```{r}\n\nbootstrapped_means_reds <- bootstrap_means(\n    real_sample_data |>\n        filter(coin_colour == \"red\") |>\n        pull('outcome')  \n    )\n\nbootstrapped_means_blues <- bootstrap_means(\n    real_sample_data |>\n        filter(coin_colour == \"blue\") |>\n        pull('outcome')  \n    )\n\n\n\n\nhead(bootstrapped_means_reds)\nhead(bootstrapped_means_blues)\n```\n\nAnd what do these two distributions look like?\n\n```{r}\ntibble(\n    rep = 1:length(bootstrapped_means_reds),\n    red = bootstrapped_means_reds,\n    blue = bootstrapped_means_blues\n) |>\n    pivot_longer(\n        cols = c(red, blue),\n        names_to = \"colour\",\n        values_to = \"value\"\n    ) |>\n    ggplot(aes(x = value, fill = colour)) + \n    geom_histogram(bins = 50, position = \"dodge\")\n\n```\n\nSo it's clear the distributions for mean values of the two different coin types are different, even though there's some overlap.\n\nLet's now look at doing some post-stratification, where we sample from the two groups in proportion to the relative probabilities of encountering observations from the two groups in *the population* as compared with *the sample*. Let's think through what this means:\n\n| Group      | Sample | Population | Ratio |\n|------------|--------|------------|-------|\n| Blue       | 0.5    | 0.75       | $3/2$ |\n| Red        | 0.5    | 0.25       | $1/2$ |\n| Column Sum | 1.00   | 1.00       |       |\n\n: Proportions by group in sample and population\n\nIn this table, the ratio is the row-wise ratio of the population value divided by the sample value. Note that the ratios have a common denominator, 2, which we can drop in defining the probability weights, leaving us with `3` for `blue` and `1` for `red`.\n\nWe can adapt the standard bootstrapping approach by using the `prob` argument in the `sample()` function, using these weights:\n\n```{r}\nsample_weights <- \n    tibble(\n        coin_colour = c(\"blue\", \"red\"),\n        wt = c(3, 1)\n    )\n\nreal_sample_data_wt <- \n    left_join(\n        real_sample_data, sample_weights\n    )\n\nreal_sample_data_wt\n```\n\nAnd now a slightly modified version of the bootstrapping function: \n\n```{r}\nbootstrap_means_wt <- function(x, wt, nReps = 10000){ #wt is the weighting\n    out <- vector(\"numeric\", nReps) \n\n    for (i in 1:nReps){\n        this_resample <- sample(\n            x=x, \n            size = length(x), \n            prob = wt, # This is the new argument\n            replace = TRUE # This is what makes it bootstrapping\n        )\n        out[i] <- mean(this_resample)\n    }\n    out\n}\n\n```\n\nAnd to run:\n\n```{r}\nbootstrapped_means_poststratified <- bootstrap_means_wt(\n    x = real_sample_data_wt$outcome,\n    wt = real_sample_data_wt$wt\n)\n\nhead(bootstrapped_means_poststratified)\n\n```\n\nNow, analytically, we can calculate what the mean of the population should be given the proportion of blues and reds, and the proportion of blues that are heads, and proportion of reds that are heads: \n\n\n```{r}\nheads_if_blue <- 0.47\nheads_if_red <- 0.65\n\nexpected_pop_prop_heads <- (3/4) * heads_if_blue + (1/4) * heads_if_red\n\nexpected_pop_prop_heads\n```\n\nSo within the population we would expect 51.5% of coins to come up heads. \n\nLet's now look at the bootstrapped and reweighted distribution to see where 0.515 fits within this distribution:\n\n\n```{r}\nggplot() + \n    geom_histogram(aes(x = bootstrapped_means_poststratified), bins=50) + \n    geom_vline(aes(xintercept = expected_pop_prop_heads), linewidth = 1.2, colour = \"purple\")\n\n```\n\nSo we can see that the true population mean falls within the reweighted bootstrapped distribution of the values of the mean estimated. How about if we had not performed reweighting on the sample?\n\n```{r}\ntibble(value = bootstrapped_means) |>\n    ggplot() + \n    geom_histogram(aes(x = value), bins=50) + \n    geom_vline(aes(xintercept = expected_pop_prop_heads), linewidth = 1.2, colour = \"purple\")\n\n```\n\nSo, although on this occasion, the true population value is also within the range of the un-reweighted bootstrapped distribution, it is further from the centre of this distribution's mass. \n\nLet's give some numbers to the above. What proportion of the bootstrapped values are below the true population value?\n\nFirst without reweighting:\n\n```{r}\nmean(bootstrapped_means < expected_pop_prop_heads)\n\n```\n\nOnly about 3.4% of the means from the unweighted bootstrapping were more extreme than the true population value. \n\nAnd now with reweighting:\n\n```{r}\nmean(bootstrapped_means_poststratified < expected_pop_prop_heads)\n\n```\n\nNow 22.4% of values of the means from the reweighted/post-stratified bootstrapped distribution are below the true value. This is the difference between the true value being in the 90% central interval or not. \n\n\n## Summary\n\nIn this post we've illustrated the importance of post-stratifying data were we know a sample is biased in terms of the relative weight given to the strata it contains as compared with the population. We've also shown, using Base R functions alone, how to perform this post-stratification using just two additional changes: a vector of weights, which was fairly straightforward to calculate; and the passing of this vector of weights to the `prob` argument in the `sample()` function. \n\nIn this post we've focused on a hypothetical example, and built the requisite functions and code from scratch. In practice, packages like [`survey` can be used to perform post-stratification in fewer lines](https://stats.oarc.ucla.edu/r/faq/how-do-i-analyze-survey-data-with-stratification-after-sampling-poststratification/), [`svrep`](https://cran.r-project.org/web/packages/svrep/vignettes/bootstrap-replicates.html), and [boot](https://cran.r-project.org/web/packages/boot/index.html) can make the process much more straightforward. ","srcMarkdownNoYaml":"\n\n## Introduction\n\nIn [the introductionary post](../resampling-approaches-intro/index.qmd) in this series on Hacker Stats, I mentioned that resampling methods can be used to perform post-stratification, meaning reweighting of observations from a sample in such a way as to make them more representative of the population of interest to us. Let's look at this using a  variation of the [red coin/blue coin](../permutation-with-base-r/index.qmd) example from a couple of posts ago.\n\n## Red Coin/Blue Coin\n\nImagine we have a **population** of two types of coin:\n\n-   **Red Coins**, which come up heads 65% of the time\n-   **Blue Coins**, which come up heads 47% of the time\n\nWithin our *population*, we know 75% of the coins are **Blue coins**, and 25 of the coins are **Red Coins**.\n\nHowever, our sample contains 20 red coins, and 20 blue coins. i.e. the distribution of coin types in our sample is different to that in our population.\n\nLet's first create this sample dataset:\n\n```{r}\n\nlibrary(tidyverse)\n\nset.seed(9)\n\ndraws_red <- rbinom(n=20, size = 1, prob = 0.65)\ndraws_blue <- rbinom(n=20, size = 1, prob = 0.47)\n\ncoin_colour <- c(\n    rep(\"red\", 20),\n    rep(\"blue\", 20)\n)\n\nreal_sample_data <- data.frame(\n    coin_colour = coin_colour, \n    outcome = c(draws_red, draws_blue)\n)\n\nrm(draws_red, draws_blue, coin_colour)\n\nhead(real_sample_data)\n```\n\nWhat's the expected probability of heads in the sample?\n\n```{r}\nmean(real_sample_data$outcome)\n\nreal_sample_data |>\n    group_by(coin_colour) |>\n    summarise(prop = mean(outcome))\n```\n\nOverall, 65% of the sample - 20 reds, 20 blues - are heads. The proportion of blues is 50%, and of reds is 80%. So, it so happens that, with this random number seed, the proportions in the sample of both reds and blues are higher than the theoretical average (the `prob` value arguments in the code above).\n\nLet's now try to use bootstrapping to calculate a distribution around the sample mean:\n\n```{r}\nbootstrap_means <- function(x, nReps = 10000){\n    out <- vector(\"numeric\", nReps) \n\n    for (i in 1:nReps){\n        this_resample <- sample(\n            x=x, \n            size = length(x), \n            replace = TRUE # This is what makes it bootstrapping\n        )\n        out[i] <- mean(this_resample)\n    }\n    out\n}\n\nbootstrapped_means <- bootstrap_means(real_sample_data$outcome)\n\nhead(bootstrapped_means)\n```\n\nWhat does this look like as a histogram?\n\n```{r}\ntibble(value = bootstrapped_means) |>\n    ggplot(aes(x = value)) + \n    geom_histogram(bins = 50)\n\n```\n\nWe can see the familiar bell-shaped distribution of values here. What about for blues and reds separately?\n\n```{r}\n\nbootstrapped_means_reds <- bootstrap_means(\n    real_sample_data |>\n        filter(coin_colour == \"red\") |>\n        pull('outcome')  \n    )\n\nbootstrapped_means_blues <- bootstrap_means(\n    real_sample_data |>\n        filter(coin_colour == \"blue\") |>\n        pull('outcome')  \n    )\n\n\n\n\nhead(bootstrapped_means_reds)\nhead(bootstrapped_means_blues)\n```\n\nAnd what do these two distributions look like?\n\n```{r}\ntibble(\n    rep = 1:length(bootstrapped_means_reds),\n    red = bootstrapped_means_reds,\n    blue = bootstrapped_means_blues\n) |>\n    pivot_longer(\n        cols = c(red, blue),\n        names_to = \"colour\",\n        values_to = \"value\"\n    ) |>\n    ggplot(aes(x = value, fill = colour)) + \n    geom_histogram(bins = 50, position = \"dodge\")\n\n```\n\nSo it's clear the distributions for mean values of the two different coin types are different, even though there's some overlap.\n\nLet's now look at doing some post-stratification, where we sample from the two groups in proportion to the relative probabilities of encountering observations from the two groups in *the population* as compared with *the sample*. Let's think through what this means:\n\n| Group      | Sample | Population | Ratio |\n|------------|--------|------------|-------|\n| Blue       | 0.5    | 0.75       | $3/2$ |\n| Red        | 0.5    | 0.25       | $1/2$ |\n| Column Sum | 1.00   | 1.00       |       |\n\n: Proportions by group in sample and population\n\nIn this table, the ratio is the row-wise ratio of the population value divided by the sample value. Note that the ratios have a common denominator, 2, which we can drop in defining the probability weights, leaving us with `3` for `blue` and `1` for `red`.\n\nWe can adapt the standard bootstrapping approach by using the `prob` argument in the `sample()` function, using these weights:\n\n```{r}\nsample_weights <- \n    tibble(\n        coin_colour = c(\"blue\", \"red\"),\n        wt = c(3, 1)\n    )\n\nreal_sample_data_wt <- \n    left_join(\n        real_sample_data, sample_weights\n    )\n\nreal_sample_data_wt\n```\n\nAnd now a slightly modified version of the bootstrapping function: \n\n```{r}\nbootstrap_means_wt <- function(x, wt, nReps = 10000){ #wt is the weighting\n    out <- vector(\"numeric\", nReps) \n\n    for (i in 1:nReps){\n        this_resample <- sample(\n            x=x, \n            size = length(x), \n            prob = wt, # This is the new argument\n            replace = TRUE # This is what makes it bootstrapping\n        )\n        out[i] <- mean(this_resample)\n    }\n    out\n}\n\n```\n\nAnd to run:\n\n```{r}\nbootstrapped_means_poststratified <- bootstrap_means_wt(\n    x = real_sample_data_wt$outcome,\n    wt = real_sample_data_wt$wt\n)\n\nhead(bootstrapped_means_poststratified)\n\n```\n\nNow, analytically, we can calculate what the mean of the population should be given the proportion of blues and reds, and the proportion of blues that are heads, and proportion of reds that are heads: \n\n\n```{r}\nheads_if_blue <- 0.47\nheads_if_red <- 0.65\n\nexpected_pop_prop_heads <- (3/4) * heads_if_blue + (1/4) * heads_if_red\n\nexpected_pop_prop_heads\n```\n\nSo within the population we would expect 51.5% of coins to come up heads. \n\nLet's now look at the bootstrapped and reweighted distribution to see where 0.515 fits within this distribution:\n\n\n```{r}\nggplot() + \n    geom_histogram(aes(x = bootstrapped_means_poststratified), bins=50) + \n    geom_vline(aes(xintercept = expected_pop_prop_heads), linewidth = 1.2, colour = \"purple\")\n\n```\n\nSo we can see that the true population mean falls within the reweighted bootstrapped distribution of the values of the mean estimated. How about if we had not performed reweighting on the sample?\n\n```{r}\ntibble(value = bootstrapped_means) |>\n    ggplot() + \n    geom_histogram(aes(x = value), bins=50) + \n    geom_vline(aes(xintercept = expected_pop_prop_heads), linewidth = 1.2, colour = \"purple\")\n\n```\n\nSo, although on this occasion, the true population value is also within the range of the un-reweighted bootstrapped distribution, it is further from the centre of this distribution's mass. \n\nLet's give some numbers to the above. What proportion of the bootstrapped values are below the true population value?\n\nFirst without reweighting:\n\n```{r}\nmean(bootstrapped_means < expected_pop_prop_heads)\n\n```\n\nOnly about 3.4% of the means from the unweighted bootstrapping were more extreme than the true population value. \n\nAnd now with reweighting:\n\n```{r}\nmean(bootstrapped_means_poststratified < expected_pop_prop_heads)\n\n```\n\nNow 22.4% of values of the means from the reweighted/post-stratified bootstrapped distribution are below the true value. This is the difference between the true value being in the 90% central interval or not. \n\n\n## Summary\n\nIn this post we've illustrated the importance of post-stratifying data were we know a sample is biased in terms of the relative weight given to the strata it contains as compared with the population. We've also shown, using Base R functions alone, how to perform this post-stratification using just two additional changes: a vector of weights, which was fairly straightforward to calculate; and the passing of this vector of weights to the `prob` argument in the `sample()` function. \n\nIn this post we've focused on a hypothetical example, and built the requisite functions and code from scratch. In practice, packages like [`survey` can be used to perform post-stratification in fewer lines](https://stats.oarc.ucla.edu/r/faq/how-do-i-analyze-survey-data-with-stratification-after-sampling-poststratification/), [`svrep`](https://cran.r-project.org/web/packages/svrep/vignettes/bootstrap-replicates.html), and [boot](https://cran.r-project.org/web/packages/boot/index.html) can make the process much more straightforward. "},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Resampling for post-stratification","author":"Jon Minton","date":"2024-07-23","resampling-order":5,"categories":["statistics","r","hypothesis tests","resampling","bootstrapping","post-stratification","hacker stats"],"message":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}